---
layout: post
title:  "HTTP 헤더"
date:   2024-03-24 15:23:00 +0900
categories: 이론&nbsp;-&nbsp;웹
published: false
---


### HTTP 헤더란?

- HTTP 요청과 응답 메시지에 포함되는 메타 데이터
- 키-값 쌍 형태로 구성되어 있다.
- 클라이언트와 서버 간에 추가 정보를 전달하는 데 사용된다.

#### HTTP 헤더의 역할

- 요청 및 응답 정보 제공
    - 요청 메시지의 헤더는 클라이언트가 요청하는 리소스에 대한 정보를 제공한다.
    - 응답 메시지의 헤더는 서버가 전송하는 리소스에 대한 정보를 제공한다.
- 통신 제어
    - 헤더는 HTTP 통신을 제어하는 데 사용된다.
    - 캐싱, 인증, 압축 등을 설정하는 데 사용된다.
- 확장성
    - HTTP 헤더는 새로운 기능을 추가하기 위해 사용될 수 있다.

#### HTTP 헤더의 종류

- 일반 헤더
    - 요청과 응답 모두에 적용되는 헤더
    - Host, Connection, Cache-Control 등이 해당한다.
- 요청 헤더
    - 클라이언트가 서버로 보내는 헤더
    - User-Agent, Accept, Content-Type 등이 해당한다.
- 응답 헤더
    - 서버가 클라이언트로 보내는 헤더
    - Content-Length, Content-Type, Location 등이 해당한다.

### 표현 헤더

- 요청과 응답 모두에 적용되는 헤더

#### Content-Type

- 표현 데이터의 형식을 나타낸다.
- 미디어 타입이나 문자 인코딩을 나타낸다.
- 예시
    - `text/html; charset=uft-8`
    - `application/json`
    - `image/png`

#### Content-Encoding

- 표현 데이터의 압축 방식을 나타낸다.
- 데이터를 전달하는 곳에서 압축 후 인코딩 헤더를 추가한다.
- 데이터를 읽는 쪽에서 인코딩 헤더의 정보로 압축을 해제한다.
- 예시
    - `gzip`
    - `deflate`
    - `identity`

#### Content-Language

- 표현 데이터의 자연 언어를 나타낸다.
- 예시
    - `ko`
    - `en`
    - `en-US`

#### Content-Length

- 표현 데이터의 길이를 나타낸다.
- 바이트 단위로 나타낸다.
- Transfer-Encoding(전송 코딩)을 사용하면 Content-Length를 사용하면 안 된다.

### 협상 헤더 (= 컨텐츠 네고시에이션)

- 협상 헤더는 요청시에만 사용한다.
- 클라이언트가 선호하는 표현 요청을 나타낸다.

#### Accept

- 클라이언트가 선호하는 미디어 타입을 나타낸다.

#### Accept-Charset

- 클라이언트가 선호하는 문자 인코딩을 나타낸다.

#### Accept-Encoding

- 클라이언트가 선호하는 압축 인코딩을 나타낸다.

#### Accept-Language

- 클라이언트가 선호하는 자연 언어를 나타낸다.

#### 협상과 우선순위

- Quality Values(q)를 통해 우선순위를 나타낸다.
- 0 ~ 1 사이의 값을 사용한다.
- 값이 클수록 높은 우선순위를 가진다.
- 생략하면 1과 같은 의미를 가진다.
- 구체적인 것이 우선순위를 가진다.
    - 예시 : `*/*`와 `tex/plain`이 있다먄 `text/plain`이 우선순위를 가진다.
{% highlight http %}
GET /event 
Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
{% endhighlight %}

### 전송 방식 헤더

- 클라이언트와 서버 간의 데이터 전송 방식을 제어하고 최적화하는 데 사용된다.

#### Content-Length (단순 전송)

- 가장 기본적인 전송 방식
- HTTP 헤더에서 요청 또는 응답 본문의 길이(바이트)를 나타낸다.
- 서버는 Content-Length를 사용하여 클라이언트가 받아야 할 데이터의 양을 알려준다.
- 클라이언트는 Content-Length를 사용하여 데이터 수신 완료 여부를 판단한다.

#### Content-Encoding (압축 전송)

- 서버가 응답 본문을 압축하는 데 사용한 알고리즘을 나타낸다.
- 압축은 데이터 전송량을 줄여 네트워크 속도를 향상시키는 데 도움이 된다.
- 예시
    - `gzip`
        - 가장 일반적으로 사용되는 압축 알고리즘
    - `deflate`
        - gzip보다 약간 더 효율적이지만 CPU 사용량이 더 높음
    - `br`
        - Brotli 알고리즘
        - gzip 및 deflate보다 더 높은 압축률 제공

#### Transfer-Encoding (분할 전송)

- 서버가 응답 본문을 어떻게 전송하는지 나타낸다.
- 예시
    - `chunked`
        - 본문을 여러 개의 청크로 나누어 전송
    - `identity`
        - 본문을 압축하지 않고 그대로 전송

#### Range, Content-Range (범위 전송)

##### Range

- 클라이언트가 서버에게 요청하는 특정 범위의 데이터를 나타낸다.
- 대규모 파일을 다운로드할 때 특정 부분만 선택적으로 다운로드하는 데 유용하게 사용된다.
- 예시 : `Range: bytes=0-1023` => 파일의 처음 1024 바이트만 요청

##### Content-Range

- 서버가 지원하는 데이터 범위 요청 방식을 나타낸다.
- 예시
    - `bytes`

### 일반 정보 헤더

- HTTP 일반 정보 헤더는 요청 및 응답 메시지 모두에 적용되는 헤더
- 메시지 전체에 대한 정보를 제공하며, 통신 제어, 캐싱, 연결 관리 등에 사용된다.

#### Connection

- HTTP 연결 유형을 나타낸다.
- 예시
    - `keep-alive`
        - 서버와 클라이언트 간의 연결을 유지하여 여러 요청을 처리한다.
    - `close`
        - 각 요청 후 연결을 닫는다.

#### Cache-Control

- 캐싱 정책을 설정한다.
- 예시
    - `max-age`
        - 캐시 유효기간 설정
        - 단위 : 초
    - `no-cache`
        - 캐싱 금지
    - `no-store`
        - 서버에서 응답을 저장하지 않도록 설정

#### Pragma

- 캐싱 및 기타 프록시 지침을 나타낸다.
- 예시
    - `no-cache`
        - 캐시 금지

#### Date

- 메시지 생성 시간을 나타낸다.
- 응답에서 사용한다.
- 예시
    - `Date: Tue, 15 Nov 2023 12:00:00 GMT`

#### Via

- 프록시 정보를 나타낸다.
- 예시
    - `Via: 1.1 proxy.example.com (squid/3.1.23)`

#### Warning

- 경고 메시지를 나타낸다.
- 예시
    - `Warning: 199 Miscellaneous warning`

#### Upgrade

- 프로토콜 업그레이드를 요청하거나 승인한다.
- 예시
    - `Upgrade: HTTP/2.0`
    - `Upgrade: HTTP/3.0`

#### Keep-Alive

- 지속적인 연결을 설정한다.
- 예시
    - `Keep-Alive: timeout=5, max=100`

#### Referer

- 현재 요청된 페이지의 이전 웹 페이지의 주소를 나타낸다.
- A에서 B로 이동하는 경우 B를 요청할 떄 `Referer: A`를 포함해서 요청한다.
- Referer를 통해서 유입 경로를 분석할 수 있다.
- 요청에서 사용한다.

#### User-Agent

- 유저 에이전트 애플리케이션 정보를 나타낸다.
- 클라이언트의 애플리케이션 정보를 나타낸다.
    - 웹 브라우저 정보 등
- 어떤 브라우저에서 장애가 발생하는지 파악할 수 있다.
- 요청에서 사용한다.
- 예시
    - `user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36`

#### Server

- 요청을 처리하는 오리진 서버의 소프트웨어 정보를 나타낸다.
- 응답에서 사용한다.
- 예시
    - `Server: Apache/2.2.22 (Debian)`
    - `server: nginx`

### 특별한 정보 헤더

- 요청 또는 응답 메시지에 대한 추가 정보를 제공하는 헤더
- 클라이언트와 서버 간의 통신을 제어하고 특정 기능을 구현하는 데 사용된다.

#### Host

- 요청한 호스트 정보 (도메인)
- 요청에서 사용한다.
- 필수
- 하나의 서버가 여러 도메안을 처리해야할 때 필요하다.
- 하나의 IP 주소에 여러 도메인이 적용되어 있을 때 필요하다.
- 예시
    - `Host: www.google.com`

#### Location

- 리다이렉션될 페이지를 나타낸다.
- 웹 브라우저는 3XX 응답 결과에 Location 헤더가 있으면 Location의 위치로 자동 이동한다.

#### Allow

- 허용 가능한 HTTP 메서드를 나타낸다.
- 405 Method Not Allowed에서 응답에 포함해야 한다.
- 예시
    - `Allow: GET, HEAD, PUT`

#### Retry-After

- 유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간을 나타낸다.
- 503 Service Unavailable에서 응답에 포함해야 한다.
- 예시
    - `Retry-After: Fri, 31 Dec 1999 23:59:59 GMT` => 날짜 표기
    - `Retry-After: 120` => 초단위 표기

### 인증 헤더

#### Authorization

- 서버에 전달할 클라이언트 인증 정보를 나타낸다.
- 클라이언트가 서버에 자격 증명을 제공하는 데 사용된다.
- 인증 방식
    - Basic:
        - 사용자 이름과 비밀번호를 Base64로 인코딩하여 전송한다.
    - Digest
        - MD5 해시를 사용하여 사용자 이름과 비밀번호를 안전하게 전송한다.
    - Bearer
        - OAuth 토큰을 사용하여 인증한다.
- 예시
    - `Authorization: <인증 방식> <자격 증명>`
    - `Authorization: Basic xxxxxxxxxxxxxxxx`

#### WWW-Authenticate

- 리소스 접근시 필요한 인증 방법을 나타낸다.
- 401 Unauthorized 응답과 함께 사용한다.
- 인증 방식
    - Basic 
        - 서버가 Basic 인증을 요청한다.
    - Digest
        - 서버가 Digest 인증을 요청한다.
- 추가 정보
    - realm
        - 인증 영역을 나타낸다.
    - nonce
        - 서버에서 생성한 임의 문자열을 나타낸다.
    - qop
        - 질문-응답 인증을 사용할지 여부를 나타낸다.
- 예시
    - `WWW-Authenticate: <인증 방식> <추가 정보>`
    - `WWW-Authenticate: Newauth realm="apps", type=1, title="Login to \"apps\"", Basic realm="simple"`

#### Proxy-Authorization

- 프록시 서버에 전달할 클라이언트 인증 정보를 나타낸다.
- 인증 방식
    - Basic
        - 프록시 서버 인증에 Basic 인증을 사용한다.
    - Digest
        - 프록시 서버 인증에 Digest 인증을 사용한다.
- 예시
    - `Proxy-Authorization: <인증 방식> <자격 증명>`
    - `Proxy-Authorization: Basic xxxxxxxxxxxxxxxx`

### 쿠키 헤더

- HTTP 쿠키 헤더는 클라이언트와 서버 간의 상태 정보를 유지하는 데 사용된다.
- `쿠키` : 서버에서 클라이언트로 전송된 작은 데이터 조각
- 클라이언트는 이후 요청에 쿠키를 포함하여 서버에 다시 전송한다.
- 활용 방법
    - 사용자 인증 및 세션 관리
    - 사용자 설정 저장
    - 웹사이트 분석
    - 추적 및 타겟팅 광고
- 주의사항
    - 쿠키는 개인 정보를 포함할 수 있으므로 보안에 유의해야 한다.
    - 쿠키를 사용하면 사용자 추적이 가능하므로 개인정보 보호 측면에서 주의해야 한다.

#### 동작 방식

1. 서버는 Set-Cookie 헤더를 사용하여 클라이언트로 쿠키를 전송한다.
2. 클라이언트는 브라우저에 쿠키를 저장한다.
3. 클라이언트가 동일한 서버에 요청을 보낼 때마다 브라우저는 쿠키를 요청 헤더에 포함하여 서버에 다시 전송한다.
4. 서버는 쿠키를 사용하여 클라이언트를 식별하고 이전 요청과 현재 요청을 연결한다.

#### Set-Cookie

- 서버에서 클라이언트로 쿠키를 전송할 때 사용한다.
- 예시
    - `Set-Cookie: nickname=honggildong; expires=date; path=/`

#### Cookie

- 클라이언트에서 서버로 쿠키를 전송할 때 사용한다.
- 예시
    - `Cookie: nickname=honggildong`

#### 쿠키 헤더 주요 속성

- Name
    - 쿠키의 이름
- Value
    - 쿠키의 값
- Domain
    - 쿠키가 적용되는 도메인
    - 생략 시 쿠키를 생성한 웹 서버에서만 사용할 수 있다.
    - `example.org`에서 생성한 쿠키에 `domain=example.org` 지정 시 해당 쿠키는 `example.org`와 `dev.example.org`에서 사용할 수 있다.
    - `example.org`에서 생성한 쿠키에 domain 지정을 생략하면 해당 쿠키는 `example.org`에서만 사용할 수 있다.
- Path
    - 쿠키가 적용되는 경로
    - 명시된 경로를 포함한 하위 경로 페이지에서만 접근할 수 있게 한다.
    - 일반적으로는 `path=/`로 지정한다.
    - `path=/home` 지정 시 `/home`이나 `/home/room`에서는 접근할 수 있지만 `/hello`에서는 접근할 수 없다.
- Expires
    - 쿠키의 유효기간
- Secure
    - 기본적으로 쿠키는 http와 https를 구분하지 않고 전송한다.
    - `Secure=true`일 경우 쿠키가 HTTPS 연결에서만 전송될 수 있도록 설정한다.
- HttpOnly
    - 기본적으로 쿠키는 JavaScript에서 접근할 수 있다.
    - `HttpOnly=true`일 경우 쿠키가 JavaScript에서 접근할 수 없도록 설정한다.
        - XSS 공격 방지
- SameSite
    - 기본적으로 쿠키는 요청 도메인과 쿠키에 설정된 도메인이 달라도 전송된다.
    - `SameSite=true`일 경우 요청 도메인과 쿠키에 설정된 도메인이 같은 경우에만 쿠키가 전송된다.

### 캐시 기본 동작

- xxx

### 검증 헤더와 조건부 요청

- xxx

### 캐시와 조건부 요청 헤더

- xxx

### 프록시 캐시

- xxx

### 캐시 무효화

- xxx

### 출처

- [모든 개발자를 위한 HTTP 웹 기본 지식](https://www.inflearn.com/course/http-%EC%9B%B9-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC#curriculum)