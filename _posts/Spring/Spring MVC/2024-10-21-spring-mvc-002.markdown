---
layout: post
title:  "[스프링 MVC 1편] 서블릿"
date:   2024-10-21 19:56:00 +0900
categories: Spring&nbsp;MVC
tags: []
published: false
---

### 프로젝트 생성

- 본격적으로 서블릿을 이해하기 위해 프로젝트를 생성해보자.
- [스프링 이니셜라이저](https://start.spring.io/)를 통해 프로젝트를 생성하자.
    - 프로젝트 선택
    -   Project: Gradle - Groovy Project
    -   Language: Java
    -   Spring Boot: 3.x.x
    - Project Metadata
        - Group: hello
        - Artifact: servlet
        - Name: servlet
        - Package name: hello.servlet
        - Packaging: War (주의!)
        - Java: 17 또는 21
    - Dependencies
        - Spring Web
        - Lombok
    - 주의
        - JSP를 실행하기 위해서 패키징을 Jar가 아닌 War로 변경해야 한다.

### Hello 서블릿

- 스프링 부트 환경에서 서블릿 등록하고 사용해보자.
- 서블릿의 실행 과정
    1. 톰캣 같은 웹 애플리케이션 서버를 직접 설치
    2. 그 위에 서블릿 코드를 클래스 파일로 빌드해서 올린다.
    3. 톰캣 서버를 실행
- 톰캣 서버를 설치하고 직접 실행하기는 매우 번거롭다.
    - 스프링 부트는 톰캣 서버를 내장하고 있으므로, 서버 설치 없이 편리하게 서블릿 코드를 실핼할 수 있다.

#### 스프링 부트 서블릿 환경 구성

- 스프링 부트는 서블릿을 직접 등록해서 사용할 수 있도록 `@ServletComponentScan`을 지원한다.
- `@SpringBootApplication`가 적용되어 있는 ServletApplication에 `@ServletComponentScan`를 추가하자.

#### 서블릿 등록하기

- 처음으로 실제 동작하는 서블릿 코드를 등록해보자.

{% highlight java %}
package hello.servlet.basic;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

@WebServlet(name = "helloServlet", urlPatterns = "/hello")
public class HelloServlet extends HttpServlet {
    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        System.out.println("HelloServlet.service");
        System.out.println("request = " + request);
        System.out.println("response = " + response);
        String username = request.getParameter("username");
        System.out.println("username = " + username);
        
        response.setContentType("text/plain");
        response.setCharacterEncoding("utf-8");
        response.getWriter().write("hello " + username);
    }
}
{% endhighlight %}

- @WebServlet 서블릿 애노테이션
    - name
        - 서블릿 이름
    - urlPatterns
        - URL 매핑
- HTTP 요청을 통해 매핑된 URL이 호출되면 서블릿 컨테이너는 다음 메서드를 실행한다.
    - `protected void service(HttpServletRequest request, HttpServletResponse response)`
- 애플리케이션 실행 후 브라우저로 아래 주소로 접속해보자.
    - `http://localhost:8080/hello?username=world`

#### HTTP 요청 메시지 로그로 확인하기

- `application.properties`에 아래 설정을 추가하자.
    - 스프링 부트 3.2 미만은 debug로, 3.2 이상은 trace를 사용해야 로그가 출력된다.
{% highlight properties %}
logging.level.org.apache.coyote.http11=trace
{% endhighlight %}
- 서버를 다시 시작하고, 요청해보면 서버가 받은 HTTP 요청 메시지를 출력하는 것을 확인할 수 있다.
- 운영서버에 이렇게 모든 요청 정보를 다 남기면 성능 저하가 발생할 수 있다.
    - 개발 단계에서만 적용해야 한다.

#### 웹 페이지 추가

- 스프링 부트에서 jsp를 사용하려고 하면 기본적으로 `src/main/webapp` 경로에 있는 파일을 바라보게 된다.
    - 요즘 스프링은 기본이 부트라 jsp용 설정이 없어서 webapp 폴더도 없다.
    - 해당 경로로 폴더를 생성해주자.
- webapp 경로에 index.html 을 두면 http://localhost:8080 호출시 index.html 페이지가 열린다.

### HttpServletRequest - 개요

#### HttpServletRequest 역할

- HTTP 요청 메시지를 개발자가 직접 파싱해서 사용해도 된다.
    - 하지만 매우 불편하다.
- 서블릿은 개발자가 HTTP 요청 메시지를 편리하게 사용할 수 있도록 개발자 대신에 HTTP 요청 메시지를 파싱한다.
    - 그리고 그 결과를 HttpServletRequest 객체에 담아서 제공한다
- HttpServletRequest를 사용하면 HTTP 요청 메시지를 편리하게 조회할 수 있다.
{% highlight http %}
POST /save HTTP/1.1
Host: localhost:8080
Content-Type: application/x-www-form-urlencoded
username=kim&age=20
{% endhighlight %}
- HTTP 요청 메시지 정보
    - START LINE
        - HTTP 메소드
        - URL
        - 쿼리 스트링
        - 스키마, 프로토콜
    - 헤더
        - 헤더 조회
    - 바디
        - form 파라미터 형식 조회
        - message body 데이터 직접 조회
- HttpServletRequest 객체는 추가로 여러가지 부가기능도 함께 제공한다.
    - 임시 저장소 기능
        - 해당 HTTP 요청이 시작부터 끝날 때 까지 유지되는 임시 저장소 기능
        - 저장
            - request.setAttribute(name, value)
        - 조회
            - request.getAttribute(name)
    - 세션 관리 기능
        - request.getSession(create: true)

### HttpServletRequest - 기본 사용법

- HttpServletRequest가 제공하는 기본 기능들을 알아보자.
- 서버를 실행해서 아래 주소로 접속해서 HTTP 정보를 알아보자.
    - `http://localhost:8080/request-header?username=hello`

{% highlight java %}
package hello.servlet.basic.request;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

//http://localhost:8080/request-header?username=hello
@WebServlet(name = "requestHeaderServlet", urlPatterns = "/request-header")
public class RequestHeaderServlet extends HttpServlet {
    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        printStartLine(request);
        printHeaders(request);
        printHeaderUtils(request);
        printEtc(request);
        response.getWriter().write("ok");
    }

    //start line 정보
    private void printStartLine(HttpServletRequest request) {
        System.out.println("--- REQUEST-LINE - start ---");
        System.out.println("request.getMethod() = " + request.getMethod()); //GET
        System.out.println("request.getProtocol() = " + request.getProtocol()); //HTTP/1.1
        System.out.println("request.getScheme() = " + request.getScheme()); //http
        System.out.println("request.getRequestURL() = " + request.getRequestURL()); // http://localhost:8080/request-header
        System.out.println("request.getRequestURI() = " + request.getRequestURI()); // /request-header
        System.out.println("request.getQueryString() = " + request.getQueryString()); //username=hi
        System.out.println("request.isSecure() = " + request.isSecure()); //https 사용 유무
        System.out.println("--- REQUEST-LINE - end ---");
        System.out.println();
    }

    //Header 모든 정보
    private void printHeaders(HttpServletRequest request) {
        System.out.println("--- Headers - start ---");
        /*
         Enumeration<String> headerNames = request.getHeaderNames();
         while (headerNames.hasMoreElements()) {
         String headerName = headerNames.nextElement();
         System.out.println(headerName + ": " + request.getHeader(headerName));
         }
        */
        request.getHeaderNames()
                .asIterator()
                .forEachRemaining(
                    headerName -> System.out.println(headerName + ": " + request.getHeader(headerName))
                );
        System.out.println("--- Headers - end ---");
        System.out.println();
    }

    //Header 편리한 조회
    private void printHeaderUtils(HttpServletRequest request) {
        System.out.println("--- Header 편의 조회 start ---");
        System.out.println("[Host 편의 조회]");
        System.out.println("request.getServerName() = " + request.getServerName()); //Host 헤더
        System.out.println("request.getServerPort() = " + request.getServerPort()); //Host 헤더
        System.out.println();
        System.out.println("[Accept-Language 편의 조회]");
        request.getLocales().asIterator()
                .forEachRemaining(
                    locale -> System.out.println("locale = " + locale)
                );
        System.out.println("request.getLocale() = " + request.getLocale());
        System.out.println();
        System.out.println("[cookie 편의 조회]");
        if (request.getCookies() != null) {
            for (Cookie cookie : request.getCookies()) {
                System.out.println(cookie.getName() + ": " + cookie.getValue());
            }
        }
        System.out.println();
        System.out.println("[Content 편의 조회]");
        System.out.println("request.getContentType() = " + request.getContentType());
        System.out.println("request.getContentLength() = " + request.getContentLength());
        System.out.println("request.getCharacterEncoding() = " + request.getCharacterEncoding());
        System.out.println("--- Header 편의 조회 end ---");
        System.out.println();
    }

    //기타 정보
    private void printEtc(HttpServletRequest request) {
        System.out.println("--- 기타 조회 start ---");
        System.out.println("[Remote 정보]");
        System.out.println("request.getRemoteHost() = " + request.getRemoteHost());
        System.out.println("request.getRemoteAddr() = " + request.getRemoteAddr());
        System.out.println("request.getRemotePort() = " + request.getRemotePort());
        System.out.println();
        System.out.println("[Local 정보]");
        System.out.println("request.getLocalName() = " + request.getLocalName());
        System.out.println("request.getLocalAddr() = " + request.getLocalAddr());
        System.out.println("request.getLocalPort() = " + request.getLocalPort());
        System.out.println("--- 기타 조회 end ---");
        System.out.println();
    }
}
{% endhighlight %}

- 로컬에서 테스트하면 IPv6 정보가 나오는데, IPv4 정보를 보고 싶으면 다음 옵션을 VM options에 넣어주면 된다.
    - `-Djava.net.preferIPv4Stack=true`

### HTTP 요청 데이터 - 개요

- HTTP 요청 메시지를 통해 클라이언트에서 서버로 데이터를 전달하는 방법을 알아보자.
- 주요 방법
    - GET - 쿼리 파라미터
        - /url?username=hello&age=20
        - 메시지 바디 없이, URL의 쿼리 파라미터에 데이터를 포함해서 전달
        - 예시
            - 검색
            - 필터
            - 페이징
    - POST - HTML Form
        - content-type: application/x-www-form-urlencoded
        - 메시지 바디에 쿼리 파리미터 형식으로 전달 username=hello&age=20
        - 예시
            - 회원 가입
            - 상품 주문
            - HTML Form 사용
    - HTTP Message Body에 데이터를 직접 담아서 요청
        - HTTP API에서 주로 사용, JSON, XML, TEXT
        - 데이터 형식은 주로 JSON 사용
        - POST, PUT, PATCH

### HTTP 요청 데이터 - GET 쿼리 파라미터

- 메시지 바디 없이 URL의 쿼리 파라미터를 사용해서 데이터를 전달하는 방식
- 검색, 필터, 페이징 등에서 많이 사용하는 방식이다.
- 쿼리 파라미터는 URL에 다음과 같이 ? 를 시작으로 보낼 수 있다. 추가 파라미터는 & 로 구분하면 된다.
    - `http://localhost:8080/request-param?username=hello&age=20`
- 서버에서는 HttpServletRequest 가 제공하는 다음 메서드를 통해 쿼리 파라미터를 편리하게 조회할 수 있다.
    - 단일 파라미터 조회
        - `String username = request.getParameter("username");`
    - 파라미터 이름들 모두 조회
        - `Enumeration<String> parameterNames = request.getParameterNames();`
    - 파라미터를 Map으로 조회
        - `Map<String, String[]> parameterMap = request.getParameterMap();`
    - 복수 파라미터 조회
        - `String[] usernames = request.getParameterValues("username");`
- 실제 파라미터를 확인하기 위해 코드를 작성해보자.
- 코드를 작성 후 서버를 실행하여 직접 결과를 확인해보자.
    - 파라미터 전송 기능
        - `http://localhost:8080/request-param?username=hello&age=20`
    - 동일한 파라미터 전송 가능
        - `http://localhost:8080/request-param?username=hello&username=kim&age=20`
{% highlight java %}
package hello.servlet.basic.request;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

/**
 * 1. 파라미터 전송 기능
 * http://localhost:8080/request-param?username=hello&age=20
 * <p>
 * 2. 동일한 파라미터 전송 가능
 * http://localhost:8080/request-param?username=hello&username=kim&age=20
 */
@WebServlet(name = "requestParamServlet", urlPatterns = "/request-param")
public class RequestParamServlet extends HttpServlet {
    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        System.out.println("[전체 파라미터 조회] - start");

         /*
         Enumeration<String> parameterNames = request.getParameterNames();
         while (parameterNames.hasMoreElements()) {
             String paramName = parameterNames.nextElement();
             System.out.println(paramName + "=" +  request.getParameter(paramName));
         }
         */
        request.getParameterNames()
                .asIterator()
                .forEachRemaining(
                    paramName -> System.out.println(paramName + "=" + request.getParameter(paramName))
                );
        System.out.println("[전체 파라미터 조회] - end");
        System.out.println();
        System.out.println("[단일 파라미터 조회]");
        String username = request.getParameter("username");
        System.out.println("request.getParameter(username) = " + username);
        String age = request.getParameter("age");
        System.out.println("request.getParameter(age) = " + age);
        System.out.println();
        System.out.println("[이름이 같은 복수 파라미터 조회]");
        System.out.println("request.getParameterValues(username)");
        String[] usernames = request.getParameterValues("username");
        for (String name : usernames) {
            System.out.println("username=" + name);
        }
        response.getWriter().write("ok");
    }
}
{% endhighlight %}

#### 복수 파라미터에서 단일 파라미터 조회

- `request.getParameter()`는 파라미터가 하나의 값만 있을 때만 사용해야 한다.
- 만약 파라미터가 중복된다면 `request.getParameter()` 사용 시` request.getParameterValues()`의 첫번째 값을 반환한다

### HTTP 요청 데이터 - POST HTML Form

-  HTML의 Form을 사용해서 클라이언트에서 서버로 데이터를 전송하는 방식이다.
- 주로 회원 가입, 상품 주문 등에서 사용하는 방식이다.
- 특징
    - `content-type: application/x-www-form-urlencoded`
    - 메시지 바디에 쿼리 파리미터 형식으로 데이터를 전달한다.

- 테스트를 위해 jsp 페이지를 생성하자. (src/main/webapp/basic/hello-form.html)
    - 그리고 다시 서버를 실행 후 아래 주소로 접속해보자.
    - `http://localhost:8080/basic/hello-form.html`
    - 웹 브라우저가 결과를 캐시하고 있어서, 과거에 작성했던 html 결과가 보이는 경우도 있다.
        - 이때는 웹 브라우저를 새로 고침하면 된다.
        - 서버를 재시작 하지 않아서 그럴 수도 있다.

{% highlight html %}
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Title</title>
</head>
<body>
<form action="/request-param" method="post">
  username: <input type="text" name="username" />
  age: <input type="text" name="age" />
  <button type="submit">전송</button>
</form>
</body>
</html>
{% endhighlight %}

- `application/x-www-form-urlencoded` 형식은 앞서 GET에서 살펴본 쿼리 파라미터 형식과 같다.
    - 따라서 쿼리 파라미터 조회 메서드를 그대로 사용하면 된다.
    - 클라이언트(웹 브라우저) 입장에서는 두 방식에 차이가 있지만, 서버 입장에서는 둘의 형식이 동일하다.
        - `request.getParameter()`로 편리하게 구분없이 조회할 수 있다.
- content-type은 HTTP 메시지 바디의 데이터 형식을 지정한다.
    - GET URL 쿼리 파라미터 형식
        - 클라이언트에서 서버로 데이터를 전달할 때는 HTTP 메시지 바디를 사용하지 않기 때문에 content-type이 없다.
    - POST HTML Form 형식
        - 데이터를 전달하면 HTTP 메시지 바디에 해당 데이터를 포함해서 보낸다.
        - 그래서 바디에 포함된 데이터가 어떤 형식인지 content-type을 꼭 지정해야 한다.
        - 이렇게 폼으로 데이터를 전송하는 형식을 application/x-www-form-urlencoded 라 한다

### HTTP 요청 데이터 - API 메시지 바디 - 단순 텍스트

- HTTP message body에 데이터를 직접 담아서 요청하는 방식
- HTTP API에서 주로 사용한다. (JSON, XML, TEXT)
- 데이터 형식은 주로 JSON을 사용한다.
- HTTP 메소드가 POST, PUT, PATCH일 떄 주로 사용한다.
    - GET일때도 가능하다.
- HTTP 메시지 바디의 데이터를 InputStream을 사용해서 직접 읽을 수 있다.

- 테스트를 위해 코드를 작성해보자.
    - 포스트맨으로 테스트해보자.    
{% highlight java %}
package hello.servlet.basic.request;

import jakarta.servlet.ServletException;
import jakarta.servlet.ServletInputStream;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.util.StreamUtils;

import java.io.IOException;
import java.nio.charset.StandardCharsets;

@WebServlet(name = "requestBodyStringServlet", urlPatterns = "/request-body-string")
public class RequestBodyStringServlet extends HttpServlet {
    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        ServletInputStream inputStream = request.getInputStream();
        String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
        System.out.println("messageBody = " + messageBody);
        response.getWriter().write("ok");
    }
}
{% endhighlight %}

- inputStream은 byte 코드를 반환한다.
- byte 코드를 우리가 읽을 수 있는 문자(String)로 보려면 문자표(Charset)를 지정해주어야 한다.
- 여기서는 UTF_8 Charset을 지정해주었다.

### HTTP 요청 데이터 - API 메시지 바디 - JSON

- 이번에는 JSON 형식으로 데이터를 전달해보자.

#### 객체 생성

- JSON 형식으로 파싱할 수 있게 객체를 하나 생성하자.
{% highlight java %}
package hello.servlet.basic;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class HelloData {
    private String username;
    private int age;
}
{% endhighlight %}

#### JSON 통신

- 이번에는 JSON으로 데이터를 전달하기 위한 코드를 작성하자.
    - 포스트맨으로 테스트해보자.
{% highlight java %}
package hello.servlet.basic.request;

import com.fasterxml.jackson.databind.ObjectMapper;
import hello.servlet.basic.HelloData;
import org.springframework.util.StreamUtils;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletInputStream;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

/**
 * http://localhost:8080/request-body-json
 *
 * JSON 형식 전송
 * content-type: application/json
 * message body: {"username": "hello", "age": 20}
 *
 */
@WebServlet(name = "requestBodyJsonServlet", urlPatterns = "/request-body-json")
public class RequestBodyJsonServlet extends HttpServlet {
    private ObjectMapper objectMapper = new ObjectMapper();

    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        ServletInputStream inputStream = request.getInputStream();
        String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
        System.out.println("messageBody = " + messageBody);
        HelloData helloData = objectMapper.readValue(messageBody, HelloData.class);
        System.out.println("helloData.username = " + helloData.getUsername());
        System.out.println("helloData.age = " + helloData.getAge());
        response.getWriter().write("ok");
    }
}
{% endhighlight %}

- JSON 결과를 파싱해서 사용할 수 있는 자바 객체로 변환하려면 Jackson, Gson 같은 JSON 변환 라이브러리를 추가해서 사용해야 한다.
    - 스프링 부트로 Spring MVC를 선택하면 기본으로 Jackson 라이브러리(ObjectMapper)를 함께 제공한다.
- HTML form 데이터도 메시지 바디를 통해 전송되므로 직접 읽을 수 있다.
    - 하지만 편리한 파리미터 조회 기능(request.getParameter(xxx))을 이미 제공하기 때문에 파라미터 조회 기능을 사용하면 된다.

### HttpServletResponse - 기본 사용법

#### HttpServletResponse 역할

- HTTP 응답 메시지 생성
    - HTTP 응답코드 지정
    - 헤더 생성
    - 바디 생성
- 편의 기능 제공
    - Content-Type, 쿠키, Redirect

#### 기본 사용법

- HttpServletResponse의 기본 사용법을 알아 보기 위해 코드를 작성하자.
{% highlight java %}
package hello.servlet.basic.response;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

/**
 * http://localhost:8080/response-header
 *
 */
@WebServlet(name = "responseHeaderServlet", urlPatterns = "/response-header")
public class ResponseHeaderServlet extends HttpServlet {
    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //[status-line]
        response.setStatus(HttpServletResponse.SC_OK); //200

        //[response-headers]
        response.setHeader("Content-Type", "text/plain;charset=utf-8");
        response.setHeader("Cache-Control", "no-cache, no-store, mustrevalidate");
        response.setHeader("Pragma", "no-cache");
        response.setHeader("my-header","hello");

        //[Header 편의 메서드]
        content(response);
        cookie(response);
        redirect(response);

        //[message body]
        PrintWriter writer = response.getWriter();
        writer.println("ok");
    }

    //Content 편의 메서드
    private void content(HttpServletResponse response) {
        //Content-Type: text/plain;charset=utf-8
        //Content-Length: 2
        //response.setHeader("Content-Type", "text/plain;charset=utf-8");
        response.setContentType("text/plain");
        response.setCharacterEncoding("utf-8");
        //response.setContentLength(2); //(생략시 자동 생성)
    }

    //쿠키 편의 메서드
    private void cookie(HttpServletResponse response) {
        //Set-Cookie: myCookie=good; Max-Age=600;
        //response.setHeader("Set-Cookie", "myCookie=good; Max-Age=600");
        Cookie cookie = new Cookie("myCookie", "good");
        cookie.setMaxAge(600); //600초
        response.addCookie(cookie);
    }

    //redirect 편의 메서드
    private void redirect(HttpServletResponse response) throws IOException {
        //Status Code 302
        //Location: /basic/hello-form.html
        //response.setStatus(HttpServletResponse.SC_FOUND); //302
        //response.setHeader("Location", "/basic/hello-form.html");
        response.sendRedirect("/basic/hello-form.html");
    }
}
{% endhighlight %}

### HTTP 응답 데이터 - 단순 텍스트, HTML

- HTTP 응답 메시지는 주로 다음 내용을 담아서 전달한다.
    - 단순 텍스트 응답
        - `writer.println("ok");`
    - HTML 응답
    - HTTP API
        - MessageBody JSON 응답
- HTML로 응답하는 것을 확인하기 위해 코드를 작성해보자.
    - HTTP 응답으로 HTML을 반환할 때는 content-type을 text/html 로 지정해야 한다.
{% highlight java %}
package hello.servlet.basic.response;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

@WebServlet(name = "responseHtmlServlet", urlPatterns = "/response-html")
public class ResponseHtmlServlet extends HttpServlet {
    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //Content-Type: text/html;charset=utf-8
        response.setContentType("text/html");
        response.setCharacterEncoding("utf-8");
        PrintWriter writer = response.getWriter();
        writer.println("<html>");
        writer.println("<body>");
        writer.println(" <div>안녕?</div>");
        writer.println("</body>");
        writer.println("</html>");
    }
}
{% endhighlight %}

### HTTP 응답 데이터 - API JSON

- 이번에는 JSON으로 응답하는 것을 확인하기 위해 코드를 작성해보자.
    - HTTP 응답으로 JSON을 반환할 때는 content-type을 application/json 로 지정해야 한다.
    - Jackson 라이브러리가 제공하는 objectMapper.writeValueAsString() 를 사용하면 객체를 JSON 문자로 변경할 수 있다.
{% highlight java %}
package hello.servlet.basic.response;

import com.fasterxml.jackson.databind.ObjectMapper;
import hello.servlet.basic.HelloData;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * http://localhost:8080/response-json
 */
@WebServlet(name = "responseJsonServlet", urlPatterns = "/response-json")
public class ResponseJsonServlet extends HttpServlet {
    private ObjectMapper objectMapper = new ObjectMapper();

    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //Content-Type: application/json
        response.setHeader("content-type", "application/json");
        response.setCharacterEncoding("utf-8");
        HelloData data = new HelloData();
        data.setUsername("kim");
        data.setAge(20);

        //{"username":"kim","age":20}
        String result = objectMapper.writeValueAsString(data);
        response.getWriter().write(result);
    }
}
{% endhighlight %}

- application/json 은 스펙상 utf-8 형식을 사용하도록 정의되어 있다.
    - 그래서 스펙에서 charset=utf-8과 같은 추가 파라미터를 지원하지 않는다.
    - 따라서 application/json이라고만 사용해야 한다.
    - application/json;charset=utf-8 이라고 전달해도 상관은 없긴 한데 의미 없는 파라미터를 추가한 것이 된다.
- response.getWriter()를 사용하면 추가 파라미터를 자동으로 추가해버린다.
    - 이때는 response.getOutputStream()으로 출력하면 그런 문제가 없다.

### 출처

- [스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술](https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-1)