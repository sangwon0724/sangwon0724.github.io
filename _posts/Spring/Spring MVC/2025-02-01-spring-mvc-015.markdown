---
layout: post
title:  "[스프링 MVC 2편] 예외 처리와 오류 페이지"
date:   2025-02-01 15:31:00 +0900
categories: Spring&nbsp;MVC
tags: []
---

### 프로젝트 생성

- [스프링 이니셜라이저](https://start.spring.io/)를 통해 프로젝트를 생성하자.
    - 프로젝트 선택
      - Project
        - Gradle - Groovy Project
      - Language
        - Java
      - Spring Boot
        - 3.x.x
    - Project Metadata
        - Group
          - hello
        - Artifact
          - exception
        - Name
          - exception
        - Package name
          - hello.exception
        - Packaging
          - Jar (주의!)
        - Java
          - 17 또는 21
    - Dependencies
        - Spring Web
        - Thymeleaf
        - Lombok
        - Validation

### 서블릿 예외 처리 - 시작

- 스프링이 아닌 순수 서블릿 컨테이너는 다음 2가지 방식으로 예외 처리를 지원한다.
  - Exception (예외)
  - response.sendError (HTTP 상태 코드, 오류 메시지)

### Exception (예외)

#### 자바 직접 실행
  
- 자바의 메인 메서드를 직접 실행하는 경우 main 이라는 이름의 쓰레드가 실행된다.
- 실행 도중에 예외를 잡지 못하고 처음 실행한 main() 메서드를 넘어서 예외가 던져지면,  
  예외 정보를 남기고 해당 쓰레드는 종료된다.

#### 웹 애플리케이션
  
- 웹 애플리케이션은 사용자 요청별로 별도의 쓰레드가 할당되고, 서블릿 컨테이너 안에서 실행된다.
- 애플리케이션에서 예외가 발생했는데, 어디선가 try ~ catch로 예외를 잡아서 처리하면 아무런 문제가 없다.
- 그런데 만약에 애플리케이션에서 예외를 잡지 못하고, 서블릿 밖으로 까지 예외가 전달되면 어떻게 동작할까?
  - `WAS(여기까지 전파) <= 필터 <= 서블릿 <= 인터셉터 <= 컨트롤러(예외발생)`
  - 결국 톰캣같은 WAS 까지 예외가 전달된다.
  - WAS는 예외가 올라오면 어떻게 처리해야 할까?

#### WAS 예외 테스트

- 스프링 부트가 제공하는 기본 예외 페이지를 비활성화해주자.
  - `server.error.whitelabel.enabled=false`
  - application.properties에 명시하면 된다.

- 그런 다음에 컨트롤러를 하나 만들어주자.
{% highlight java %}
package hello.exception.servlet;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Slf4j
@Controller
public class ServletExController {
    @GetMapping("/error-ex")
    public void errorEx() {
        throw new RuntimeException("예외 발생!");
    }
}
{% endhighlight %}

- 그리고 서버를 실행시켜서 `http://localhost:8080/error-ex`에 접속해보자.
  - 들어가보면 `HTTP Status 500 – Internal Server Error`라고 메시지가 출력되는 화면이 나올 것이다.

- 이번에는 존재하지 않는 페이지인 `http://localhost:8080/test`로 접속해보자.
  - 들어가보면 `HTTP Status 404 – Not Found`라고 메시지가 출력되는 화면이 나올 것이다.

### response.sendError (HTTP 상태 코드, 오류 메시지)

- 오류가 발생했을 때 `HttpServletResponse`가 제공하는 `sendError`라는 메서드를 사용해도 된다.
- 이것을 호출한다고 당장 예외가 발생하는 것은 아니다.
  - 대신에 서블릿 컨테이너에게 오류가 발생했다는 점을 전달할 수 있다.
- 이 메서드를 사용하면 HTTP 상태 코드와 오류 메시지도 추가할 수 있다.

#### 사용 방법

- `response.sendError(HTTP 상태 코드)`
- `response.sendError(HTTP 상태 코드, 오류 메시지)`

#### 테스트

- 아까 만들었던 `ServletExController`에 메소드를 2개 더 추가해보자.

{% highlight java %}
@GetMapping("/error-404")
    public void error404(HttpServletResponse response) throws IOException {
        response.sendError(404, "404 오류!");
    }
    
    @GetMapping("/error-500")
    public void error500(HttpServletResponse response) throws IOException {
        response.sendError(500);
    }
{% endhighlight %}

#### sendError의 흐름은 어떻게 될까?

`WAS(sendError 호출 기록 확인) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러 (response.sendError())`

- `response.sendError()`를 호출하면 `response` 내부에는 오류가 발생했다는 상태를 저장해둔다.
- 서블릿 컨테이너는 고객에게 응답 전에 `response`에 `sendError()`가 호출되었는지 확인한다.
  - 그리고 호출되었다면 설정한 오류 코드에 맞추어 기본 오류 페이지를 보여준다.

### 서블릿 예외 처리 - 오류 화면 제공

#### 스프링 부트 이전

- 과거에는 아래처럼 `web.xml`이라는 파일에 다음과 같이 오류 화면을 등록했다.

{% highlight xml %}
<web-app>
  <error-page>
    <error-code>404</error-code>
    <location>/error-page/404.html</location>
  </error-page>
  <error-page>
    <error-code>500</error-code>
    <location>/error-page/500.html</location>
  </error-page>
  <error-page>
    <exception-type>java.lang.RuntimeException</exception-type>
    <location>/error-page/500.html</location>
  </error-page>
</web-app>
{% endhighlight %}

#### 스프링 부트

- 지금은 스프링 부트를 통해서 서블릿 컨테이너를 실행한다.  
그래서 스프링 부트가 제공하는 기능을 사용해서 서블릿 오류 페이지를 등록하면 된다.

{% highlight java %}
package hello.exception;

import org.springframework.boot.web.server.ConfigurableWebServerFactory;
import org.springframework.boot.web.server.ErrorPage;
import org.springframework.boot.web.server.WebServerFactoryCustomizer;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;

@Component
public class WebServerCustomizer implements WebServerFactoryCustomizer<ConfigurableWebServerFactory> {
    @Override
    public void customize(ConfigurableWebServerFactory factory) {
        //에러 페이지 정의
        ErrorPage errorPage404 = new ErrorPage(HttpStatus.NOT_FOUND, "/error-page/404");
        ErrorPage errorPage500 = new ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, "/error-page/500");
        ErrorPage errorPageEx = new ErrorPage(RuntimeException.class, "/error-page/500");
        
        //에러 페이지 적용
        factory.addErrorPages(errorPage404, errorPage500, errorPageEx);
    }
}
{% endhighlight %}

- 물론 저렇게 명시만 하면 안 되고 당연히 컨트롤러도 정의를 해줘야 한다.

{% highlight java %}
package hello.exception.servlet;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Slf4j
@Controller
public class ErrorPageController {
    @RequestMapping("/error-page/404")
    public String errorPage404(HttpServletRequest request, HttpServletResponse response) {
        log.info("errorPage 404");
        return "error-page/404";
    }

    @RequestMapping("/error-page/500")
    public String errorPage500(HttpServletRequest request, HttpServletResponse response) {
        log.info("errorPage 500");
        return "error-page/500";
    }
}
{% endhighlight %}

- 이제 해당하는 경로에 html 파일을 만들어주면 에러 페이지 설정이 끝난다.

### 서블릿 예외 처리 - 오류 페이지 작동 원리

서블릿은` Exception (예외)`가 발생해서 서블릿 밖으로 전달되거나  
`response.sendError()`가 호출 되었을 때 설정된 오류 페이지를 찾는다.

- 예외 발생 흐름
  - `WAS(여기까지 전파) <= 필터 <= 서블릿 <= 인터셉터 <= 컨트롤러(예외발생)`
- sendError 흐름
  - `WAS(sendError 호출 기록 확인) <= 필터 <= 서블릿 <= 인터셉터 <= 컨트롤러 (response.sendError())`

WAS는 해당 예외를 처리하는 오류 페이지 정보를 확인한다.
  - 예시 : `new ErrorPage(RuntimeException.class, "/error-page/500")`
    1. RuntimeException 예외가 WAS까지 전달되면 WAS는 오류 페이지 정보를 확인한다.
    2. WAS가  RuntimeException 의 오류 페이지로 `/error-page/500`이 지정되있는 것을 확인한다.
    . WAS는 오류 페이지를 출력하기 위해 `/error-page/500`을 다시 요청한다.

중요한 점은 클라이언트(웹 브라우저)는 서버 내부에서 이런 일이 일어나는지 전혀 모른다.  
왜냐하면 오직 서버 내부에서 오류 페이지를 찾기 위해 추가적인 호출을 하기 때문이다.

#### 오류 추가

WAS는 오류 페이지를 단순히 다시 요청만 하는 것이 아니라,  
오류 정보를 request의 attribute에 추가해서 넘겨줄 수도 있다.

- ErrorPageController에 `RequestDispatcher`를 통해서 오류 정보를 추가해보자.
- 오류 정보를 출력하는 메소드를 만들자.
  - `RequestDispatcher.ERROR_EXCEPTION`
    - 예외
  - `RequestDispatcher.ERROR_EXCEPTION_TYPE`
    - 예외 타입
  - `RequestDispatcher.ERROR_MESSAGE`
    - 오류 메시지
  - `RequestDispatcher.ERROR_REQUEST_URI`
    - 클라이언트 요청 URI
  - `RequestDispatcher.ERROR_SERVLET_NAME`
    - 오류가 발생한 서블릿 이름
  - `RequestDispatcher.ERROR_STATUS_CODE`
    - HTTP 상태 코드
{% highlight java %}
private void printErrorInfo(HttpServletRequest request) {
    //ex의 경우 NestedServletException 스프링이 한번 감싸서 반환
    log.info("ERROR_EXCEPTION: ex={}", request.getAttribute(RequestDispatcher.ERROR_EXCEPTION));
    log.info("ERROR_EXCEPTION_TYPE: {}", request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE));
    log.info("ERROR_MESSAGE: {}", request.getAttribute(RequestDispatcher.ERROR_MESSAGE));
    log.info("ERROR_REQUEST_URI: {}", request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI));
    log.info("ERROR_SERVLET_NAME: {}", request.getAttribute(RequestDispatcher.ERROR_SERVLET_NAME));
    log.info("ERROR_STATUS_CODE: {}", request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE));
    log.info("dispatchType={}", request.getDispatcherType());
  }
{% endhighlight %}

### 서블릿 예외 처리 - 필터

- 오류가 발생하면 오류 페이지를 출력하기 위해 WAS 내부에서 다시 한번 호출이 발생한다.
  - 문제는 필터, 서블릿, 인터셉터도 모두 다시 호출된다.  
- 그런데 로그인 인증 체크 같은 경우를 생각해보면, 이미 한번 필터나, 인터셉터에서 로그인 체크를 완료했다.  
  - 서버 내부에서 오류 페이지를 호출한다고 해서 해당 필터나 인터셉트가 한번 더 호출되는 것은 매우 비효율적이다.
- 결국 클라이언트로 부터 발생한 정상 요청인지, 아니면 오류 페이지를 출력하기 위한 내부 요청인지 구분할 수 있어야 한다.  
  - 서블릿은 이런 문제를 해결하기 위해 `DispatcherType`이라는 추가 정보를 제공한다

#### DispatcherType

- DispatcherType은 기본적으로 5가지 종류가 있다.
  - `REQUEST`
    - 클라이언트 요청
  - `ERROR`
    - 오류 요청
  - `FORWARD`
    - MVC에서 배웠던 서블릿에서 다른 서블릿이나 JSP를 호출할 때
    - `RequestDispatcher.forward(request, response);`
  - `INCLUDE`
    - 서블릿에서 다른 서블릿이나 JSP의 결과를 포함할 때
    - `RequestDispatcher.include(request, response);`
  - `ASYNC`
    - 서블릿 비동기 호출
- 최초 요청 시에는 DispatcherType은 `REQUEST`다.

#### 필터와 DispatcherType

- 우선 필터와 DispatcherType이 어떻게 사용되는지 알아보기 위해 로그를 출력하는 필터를 만들어보자.
{% highlight java %}
package hello.exception.filter;

import jakarta.servlet.*;
import jakarta.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;

import java.io.IOException;
import java.util.UUID;

@Slf4j
public class LogFilter implements Filter {
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        log.info("log filter init");
    }
    
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        String requestURI = httpRequest.getRequestURI();
        String uuid = UUID.randomUUID().toString();
        try {
            log.info("REQUEST [{}][{}][{}]", uuid, request.getDispatcherType(), requestURI);
            chain.doFilter(request, response);
        } catch (Exception e) {
            throw e;
        } finally {
            log.info("RESPONSE [{}][{}][{}]", uuid, request.getDispatcherType(), requestURI);
        }
    }
    
    @Override
    public void destroy() {
        log.info("log filter destroy");
    }
}
{% endhighlight %}

- 그런 다음에 애플리케이션에 해당 필터를 적용해보자.
{% highlight java %}
package hello.exception;

import hello.exception.filter.LogFilter;
import jakarta.servlet.DispatcherType;
import jakarta.servlet.Filter;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {
    @Bean
    public FilterRegistrationBean logFilter() {
        FilterRegistrationBean<Filter> filterRegistrationBean = new FilterRegistrationBean<>();
        filterRegistrationBean.setFilter(new LogFilter());
        filterRegistrationBean.setOrder(1);
        filterRegistrationBean.addUrlPatterns("/*");
        filterRegistrationBean.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ERROR);
        return filterRegistrationBean;
    }
}
{% endhighlight %}

- `filterRegistrationBean.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ERROR);`를 주목하자.
  - `setDispatcherTypes`은 해당 필터가 언제 동작할 지 지정하는 옵션이다.
  - `REQUEST`와 `ERROR`를 지정하게 되면 클라이언트 요청이 올 때도 오류 페이지 요청 시에도 필터가 호출된다.
  - 기본값이 `REQUEST`기 떄문에 별도로 지정하지 않으면 클라이언트 요청이 왔을 때만 필터가 동작하게 된다.
  - 오류 페이지 요청 시에만 필터를 동작시키고 싶다면 `ERROR`로 지정하게 된다.

### 서블릿 예외 처리 - 인터셉터

- 우선 인터셉터와 DispatcherType이 어떻게 사용되는지 알아보기 위해 로그를 출력하는 인터셉터를 만들어보자.
{% highlight java %}
package hello.exception.interceptor;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import java.util.UUID;

@Slf4j
public class LogInterceptor implements HandlerInterceptor {
    public static final String LOG_ID = "logId";
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        String requestURI = request.getRequestURI();
        String uuid = UUID.randomUUID().toString();
        request.setAttribute(LOG_ID, uuid);
        log.info("REQUEST [{}][{}][{}][{}]", uuid, request.getDispatcherType(), requestURI, handler);
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        log.info("postHandle [{}]", modelAndView);
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        String requestURI = request.getRequestURI();
        String logId = (String)request.getAttribute(LOG_ID);
        log.info("RESPONSE [{}][{}][{}]", logId, request.getDispatcherType(), requestURI);
        if (ex != null) {
            log.error("afterCompletion error!!", ex);
        }
    }
}
{% endhighlight %}

- 그런 다음에 아까 만든 WebConfig를 통해서 애플리케이션에 해당 인터셉터를 적용해보자.
  - 테스트하기 헷갈리니 필터의 적용을 해제하기 위해 `@Bean`을 주석처리하자.
{% highlight java %}
@Override
  public void addInterceptors(InterceptorRegistry registry) {
      registry.addInterceptor(new LogInterceptor())
          .order(1)
          .addPathPatterns("/**")
          .excludePathPatterns(
              "/css/**", "/*.ico" , "/error", "/error-page/**" //오류 페이지 경로
          );
  }
{% endhighlight %}

- `filterRegistrationBean.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ERROR);`를 주목하자.
  - 아까 필터에 대해서 설명한 부분과 동일하게 동작한다.

### 스프링 부트 - 오류 페이지1

- 에러 페이지를 만들기 위해서는 많은 단계를 거쳐야 한다.
  - `WebServerCustomizer` 만들고, `ErrorPage` 추가하고, `ErrorPageController` 만들고... 번거롭다.

#### 그런데 사실 스프링 부트는 이런 과정을 모두 기본으로 제공한다.

- `ErrorPage`를 자동으로 등록한다. 이 때 `/error`라는 경로로 기본 오류 페이지를 설정한다.
- 상태코드와 예외를 설정하지 않으면 기본 오류 페이지로 사용된다.
- 서블릿 밖으로 예외가 발생하거나, `response.sendError(...)`가 호출되면 모든 오류는 `/error`를 호출하게 된다.
- `BasicErrorController`라는 스프링 컨트롤러를 자동으로 등록한다.
- `ErrorPage`에서 등록한 `/error`를 매핑해서 처리하는 컨트롤러다.
- `ErrorMvcAutoConfiguration`이라는 클래스가 오류 페이지를 자동으로 등록하는 역할을 한다.
- 예외는 500으로 처리한다.

#### 개발자는 오류 페이지만 만들면 된다.

- `BasicErrorController`는 기본적인 로직이 모두 개발되어 있다.
- 개발자는 오류 페이지 화면만 `BasicErrorController`가 제공하는 룰과 우선순위에 따라서 등록하면 된다.
  - 정적 HTML이면 정적 리소스나 뷰 템플릿 경로에 오류 페이지 파일을 만들면 된다. 
  - 동적으로 오류 화면을 만들고 싶으면 뷰 템플릿 경로에 오류 페이지 파일을 만들면 된다.

#### 뷰 선택 우선 순위

- 1 → 2 → 3 순서로 우선순위가 적용된다.
- 500처럼 구체적인 것인 5xx보다 우선순위가 높다.
  - 5xx라고 하면 500대 오류를 처리해준다.

1. 뷰 템플릿
  - `resources/templates/error/500.html`
  - `resources/templates/error/5xx.html`
2. 정적 리소스( static , public )
  - `resources/static/error/400.html`
  - `resources/static/error/404.html`
  - `resources/static/error/4xx.html`
3. 적용 대상이 없을 때 뷰 이름( error )
  - `resources/templates/error.html`

### 스프링 부트 - 오류 페이지2

- BasicErrorController 컨트롤러는 다음 정보를 model에 담아서 뷰에 전달한다.
  - 뷰 템플릿은 이 값을 활용해서 출력할 수 있다.
>* timestamp: Sat Feb 01 15:24:36 KST 2025  
>* status: 400  
>* error: Bad Request  
>* exception: org.springframework.validation.BindException  
>* trace: 예외 trace  
>* message: Validation failed for object='data'. Error count: 1  
>* errors: Errors(BindingResult)  
>* path: 클라이언트 요청 경로 (`/test`)

- 오류 관련 내부 정보들을 고객에게 노출하는 것은 좋지 않다.
  - 고객이 해당 정보를 읽어도 혼란만 더해지고, 보안상 문제가 될 수도 있다.
  - 그래서 `BasicErrorController` 오류 컨트롤러에서 다음 오류 정보를 model에 포함할지 여부 선택할 수 있다.

- application.properties
  - `server.error.include-exception=true`
    - exception 포함 여부 (true/false)
  - `server.error.include-message=on_param`
    - message 포함 여부
  - `server.error.include-stacktrace=on_param`
    - trace 포함 여부
  - `server.error.include-binding-errors=on_param`
    - errors 포함 여부

- message/trace/errors 포함 여부의 경우에는 사용할 수 있는 값의 종류는 3가지가 있다.
  - never
    - 사용하지 않음
    - 기본값 (★)
  - always
    - 항상 사용
  - on_param
    - 파라미터가 있을 때 사용
    - 파라미터가 있으면 해당 정보를 노출한다.
    - 디버그 시 문제를 확인하기 위해 사용할 수 있다.
    - 개발 서버에서 사용할 수 있지만, 운영 서버에서는 권장하지 않는다.

#### 실무에서는 노출하면 안 된다.

사용자에게는 이쁜 오류 화면과 고객이 이해할 수 있는 간단한 오류 메시지를 보여주고,  
오류는 서버에 로그로 남겨서 로그로 확인해야 한다.

#### 스프링 부트 오류 관련 옵션

- `server.error.whitelabel.enabled=true`
  - 오류 처리 화면을 못 찾을 시, 스프링 whitelabel 오류 페이지 적용
- `server.error.path=/error`
  - 오류 페이지 경로
  - 스프링이 자동 등록하는 서블릿 글로벌 오류 페이지 경로와 BasicErrorController 오류 컨트롤러 경로에 함께 사용된다.

#### 확장 포인트

에러 공통 처리 컨트롤러의 기능을 변경하고 싶으면  
ErrorController 인터페이스를 상속 받아서 구현하거나  
BasicErrorController를 상속 받아서 기능을 추가하면 된다.

### 출처

- [스프링 MVC 2편 - 백엔드 웹 개발 활용 기술](https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-2)