---
layout: post
title:  "Spring Cloud Config"
date:   2025-03-31 07:00:00 +0900
categories: Spring&nbsp;Cloud
published: false
tags: [MSA, 마이크로서비스]
---

### Spring Cloud Config

#### 정의

- 클라이언트-서버 구조를 통해 여러 마이크로서비스의 외부 설정 정보를 관리할 수 있도록 해주는 기술
- 환경설정 정보를 반환하는 API 서버의 역할을 한다고 보면 된다.
- 해당 기술을 사용한 환경설정 정보용 서버를 Config Server라고 부른다.

#### 등장 배경

마이크로서비스라는 것은 서로 다른 개별의 애플리케이션이다.  
그런데 마이크로서비스의 종류가 한,두가지면 상관이 없겠지만,  
만약 서비스의 종류가 100개가 넘는 대형 프로젝트라면  
환경설정 정보가 변동된다면 100개가 넘는 서비스마다 값을 바꿔줘야 할 것이다.

이런 상황에서 등장한 것이 Spring Cloud Config다.  
Git이나 SVN, 파일 시스템 등 외부 저장소에 환경설정 정보를 저장하고,  
해당 저장소에서 properties나 yaml같은 환경설정 파일을 읽어서,  
그 값을 각 마이크로서비스에 전달해준다.

#### 특징

- 중앙 집중식 설정 관리
    - 설정 파일을 하나의 장소에 모아 관리한다.
    - Git, SVN, 파일 시스템 등이 해당한다.
- 버전 관리
    - Git이나 SVN같은 형상 관리 시스템을 통해 설정 변경 이력 관리 가능.
- 동적 설정 반영
    - 설정 변경 시 실시간으로 클라이언트에 반영할 수 있다.
    - Webhook이나 메시지 브로커를 통해 반영한다.
    - Spring Cloud Bus라는 기술을 함께 사용해야 한다.
- 환경별 설정 지원
    - application-{profile}.yml 형식으로 다양한 환경에 따른 설정이 가능하다.
    - dev, test, prod 등으로 구분한다.
- 암호화/복호화 지원
    - 비밀번호나 API 키같은 민감한 정보를 안전하게 저장할 수 있다.
    - 물론 저장소 자체의 보안도 신경을 써야 한다.
    - 외부 저장소에 저장하는 것은 편리함의 성격이 강하다.
        - 보안의 성격도 있긴하지만 편리함이 더 크다.

#### 장점

- 중앙화된 관리
    - 하나의 서버에서 모든 설정을 관리할 수 있다.
- 환경별 분리
    - dev/test/prod 환경에 맞는 설정 파일을 분리해서 관리할 수 있다.
- 유연한 저장소 연동
    - Git, SVN, File System 등 다양한 저장소를 지원한다.
- 자동화 및 지속적 배포 연계
    - CI/CD 파이프라인과 통합할 수 있다.
- 실시간 설정 반영
    - Spring Cloud Bus와 연계 시 재시작 없이 설정을 반영할 수 있다.

#### 단점

- 의존성 증가
    - Config Server에 문제가 생기면 전체 시스템에 영향이 간다.
- 초기 설정 복잡
    - 서버/클라이언트 구성 및 Git 연동 등 설정이 복잡할 수 있다.
- 보안 문제
    - 민감 정보가 Git에 저장될 경우 유출될 가능성이 존재한다.
    - 그래서 암호화가 필수다.
- 성능 이슈
    - 대규모 시스템에서는 설정 파일 로딩 시 병목이 발생할 수도 있다.
- 실시간 반영 조건 복잡
    - Spring Cloud Bus, RabbitMQ, Kafka 등 추가 구성이 필요하다.

### 저장소 활용하기

저장소 종류별로 환경설정 파일을 작성하는 방법을 알아보자.

#### Local Git Repository

로컬 리포지토리에서는 깃 저장소의 주소만 설정하면 된다.

{% highlight yaml %}
spring:
  application:
    name: config-service
  cloud:
    config:
      server:
        git:
          uri: file:///C:/git/cloud_config
          default-label: master
{% endhighlight %}

#### Remote Git Repository

리모트 리포지토리에서는 저장소의 주소를 입력하면 된다.  
public repository일 때는 이대로 사용하면 되고,  
private repository일 때는 username과 password를 함께 명시하면 된다.

{% highlight yaml %}
spring:
  application:
    name: config-service
  cloud:
    config:
      server:
        git:
          uri: 리포지토리_주소
          default-label: master
{% endhighlight %}

#### Native File Repository

{% highlight yaml %}
spring:
  application:
    name: config-service
  cloud:
    config:
      server:
        native:
          search-locations: file:///C:/git/cloud_config
{% endhighlight %}

#### 관련 속성 설명

- `spring.cloud.config.server.git.uri`
    - 저장소의 주소
- `spring.cloud.config.server.git.username`
    - 사용자명
- `spring.cloud.config.server.git.password`
    - 비밀번호
- `spring.cloud.config.server.git.default-label`
    - 브랜치명
- `spring.cloud.config.server.native.search-locations`
    - 폴더 경로
    - 끝에 s가 붙은 것을 알 수 있지만 여러 개를 지정할 수 있다.

위 속성들말고도 다양한 속성들이 있다.

### Spring Cloud Config 연동 (Config Server)

#### build.gradle

Config Server용 프로젝트를 생성한 뒤 build.gradle에 아래의 의존성을 추가해주자.
{% highlight gradle %}
implementation 'org.springframework.cloud:spring-cloud-config-server'
{% endhighlight %}

그리고 앞선 프로젝트들처럼 아래의 내용도 함께 추가해주자.
{% highlight gradle %}
ext {
  set('springCloudVersion', "2024.0.1")
}

dependencyManagement {
  imports {
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}
{% endhighlight %}

#### Config Server 역할 부여

이제 `@SpringBootApplication` 애노테이션이 있는 클래스로 이동해서  
`@EnableConfigServer` 애노테이션을 추가함으로써  
해당 프로젝트가 Config Server로 동작하게 하자.

### Spring Cloud Config 연동 (MicroService)

#### build.gradle

Config Server랑 연동할 마이크로서비스의 build.gradle에 아래의 의존성을 추가해주자.
{% highlight gradle %}
implementation 'org.springframework.cloud:spring-cloud-starter-config'
{% endhighlight %}

### Spring Cloud Gateway에서 Spring Cloud Config 연동 ①
### Spring Cloud Gateway에서 Spring Cloud Config 연동 ②
### Profiles을 사용한 Configuration 적용

### 출처

- [Spring Cloud로 개발하는 마이크로서비스 애플리케이션(MSA)](https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4)