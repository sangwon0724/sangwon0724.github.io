---
layout: post
title:  "[스프링 MVC 1편] 웹 애플리케이션 이해"
date:   2024-10-21 16:05:00 +0900
categories: Spring&nbsp;MVC
tags: []
---

### 모든 것이 HTTP

- 웹은 HTTP 기반으로 동작한다.
- HTTP 메시지에 모든 것을 전송한다.
    - 거의 모든 형태의 데이터 전송 가능하다.
    - 서버간에 데이터를 주고 받을 때도 대부분 HTTP를 사용한다.
    - 종류
        - HTML, TEXT
        - 이미지, 음성, 영상, 파일
        - JSON, XML (API)

### 웹 서버, 웹 애플리케이션 서버

#### 웹 서버 (Web Server)

- HTTP 기반으로 동작한다.
- 정적 리소스를 제공한다.
- 기타 부가 기능을 제공한다.
- 정적 리소스 종류
    - HTML 파일 (.html)
    - CSS 파일 (.css)
    - JavaScript 파일 (.js)
    - 이미지 (.jpg, .png 등등)
    - 영상 (.mp3, .avi 등등)
- 예시
    - NGINX
    - APACHE

#### 웹 애플리케이션 서버(WAS, Web Application Server)

- HTTP 기반으로 동작한다.
- 웹 서버 기능 포함한다. (= 정적 리소스를 제공할 수 있다.)
- 프로그램 코드를 실행해서 애플리케이션 로직을 수행한다.
    - 동적 HTML, HTTP API(JSON)
    - 서블릿, JSP, 스프링 MVC
- 예시
    - 톰캣 (Tomcat)
    - Jetty
    - Undertow

#### 웹 서버와 웹 애플리케이션 서버(WAS)의 차이

- 웹 서버는 정적 리소스를 제공한다.
- WAS는 애플리케이션 로직을 실행한다.
- 그러나 정확하게 웹 서버와 WAS를 구분짓기에는 애매하다.
    - 웹 서버도 프로그램을 실행하는 기능을 포함하기도 한다.
    - 웹 애플리케이션 서버도 웹 서버의 기능을 제공한다.
- 자바에서는 서블릿 컨테이너 기능을 제공하면 WAS로 취급한다.
    - 그러나 서블릿 없이 자바코드를 실행하는 서버 프레임워크도 있다.
- 그저 WAS가 애플리케이션 코드를 실행하는데 더 특화되있을 뿐이다.

### 웹 시스템 구성

- WAS와 DB 만으로도 시스템을 구성할 수 있다.
    - WAS는 정적 리소스를 제공하고, 애플리케이션 로직 실행이 모두 제공 가능하기 때문이다.
    - 다만 WAS가 너무 많은 역할을 담당하게 되면 서버 과부하의 우려가 있다.
- 애플리케이션 로직을 실행한다는 것은 가장 비싼 가치를 가지고 있다.
    - WAS가 정적 리소스를 제공하는 역할까지 맡게 되면, 오히려 정적 리소스때문에 애플리케이션 로직 실행에 문제가 생길 수 있다.
    - WAS는 장애시 오류 화면도 노출할 수 없다.
    - 정적 리소스는 웹 서버가 처리하는 것이 제일 좋다.
    - WAS는 중요한 애플리케이션 로직 처리를 전담하는 것이 제일 좋다.
- 역할을 잘 나누어서 관리해야 한다.
    - 웹 서버는 애플리케이션 로직같은 동적인 처리가 필요하면 WAS에 요청을 위임한다.
    - 웹 서버
        - 정적 리소스만 제공하는 웹 서버는 잘 죽지 않는다.
        - WAS나 DB에 장애가 발생하면 웹 서버가 오류 화면 제공 가능
    - WAS
        - 애플리케이션 로직이 동작하는 WAS 서버는 잘 죽는다.
- 효율적인 리소스 관리 또한 중요하다.
    - 정적 리소스가 많이 사용되면 Web 서버를 증설한다.
    - 애플리케이션 리소스가 많이 사용되면 WAS를 증설한다.

### 서블릿

#### 개발자가 해야할 일

- 만약 회원 정보를 저장하는 페이지가 있다고 가정해보자.
    - 만약 그 데이터를 서버에 저장하는 과정을 모두 개발자가 직접 처리하려면 어떻게 해야할까?
    - 저장할 정보는 회원명인 username과 나이인 age만 있다고 가정한다.

1. 서버 TCP/IP 연결 대기, 소켓 연결
2. HTTP 요청 메시지를 파싱해서 읽기
3. POST 방식, /save URL 인지
4. Content-Type 확인
5. HTTP 메시지 바디 내용 피싱
    - username, age 데이터를 사용할 수 있게 파싱
6. 저장 프로세스 실행
7. 비즈니스 로직 실행
    - 데이터베이스에 저장 요청
8. HTTP 응답 메시지 생성 시작
    - HTTP 시작 라인 생성
    - Header 생성
    - 메시지 바디에 HTML 생성에서 입력
9. TCP/IP에 응답 전달, 소켓 종료

- 이렇게 무려 9가지 과정이 들어가는 어려운 작업이 매순간 필요하다.
- 이 때, 서블릿을 사용하면 7번인 비즈니스 로직만 처리할 수 있다.
- 서블릿은 비즈니스 로직 이외의 모든 부분을 자동으로 처리해준다.

#### 서블릿의 특징

- 해당 웹 애플리케이션을 호출하게 되면 서블릿 코드가 실행된다.
- HTTP 요청 정보를 편리하게 사용할 수 있는 HttpServletRequest를 제공한다.
- HTTP 응답 정보를 편리하게 제공할 수 있는 HttpServletResponse를 제공한다.
- 개발자는 HTTP 스펙을 매우 편리하게 사용할 수 있다.
- HTTP 요청, 응답 흐름
    - WAS는 Request, Response 객체를 새로 만들어서 서블릿 객체를 호출한다.
    - 개발자는 Request 객체에서 HTTP 요청 정보를 편리하게 꺼내서 사용하면 된다.
    - 개발자는 Response 객체에 HTTP 응답 정보를 편리하게 입력할 수 있다.
    - WAS는 Response 객체에 담겨있는 내용으로 HTTP 응답 정보를 생성한다.

#### 서블릿 컨테이너

- 톰캣처럼 서블릿을 지원하는 WAS를 <b>서블릿 컨테이너</b>라고 한다.
- 서블릿 컨테이너는 서블릿 객체를 생성, 초기화, 호출, 종료하는 생명주기를 관리한다.
- 서블릿 객체는 싱글톤으로 관리한다.
    - 고객의 요청이 올 때 마다 계속 객체를 생성하는 것은 비효율적이다.
    - 최초 로딩 시점에 서블릿 객체를 미리 만들어두고 재활용한다.
    - 모든 고객 요청은 동일한 서블릿 객체 인스턴스에 접근한다.
    - <b>공유 변수 사용에 주의해야 한다.</b>
    - 서블릿 컨테이너 종료시 함께 종료된다.
- JSP도 서블릿으로 변환 되어서 사용한다.
- 동시 요청을 위한 멀티 쓰레드 처리 지원한다.

### 동시 요청 - 멀티 쓰레드

#### 쓰레드

- 애플리케이션 코드를 하나하나 순차적으로 실행하는 것은 쓰레드다.
- 자바 메인 메서드를 처음 실행하면 main이라는 이름의 쓰레드가 실행된다.
- 쓰레드가 없다면 자바 애플리케이션 실행이 불가능하다.
- 쓰레드는 한번에 하나의 코드 라인만 수행한다.
- 동시 처리가 필요하면 쓰레드를 추가로 생성된다.

#### 요청 마다 쓰레드 생성

- 장점
    - 동시 요청을 처리할 수 있다.
    - 리소스(CPU, 메모리)가 허용할 때 까지 처리할 수 있다.
    - 하나의 쓰레드가 지연 되어도, 나머지 쓰레드는 정상 동작한다.
- 단점
    - 쓰레드는 생성 비용은 매우 비싸다.
        - 고객의 요청이 올 때 마다 쓰레드를 생성하면, 응답 속도가 늦어진다.
    - 쓰레드는 컨텍스트 스위칭 비용이 발생한다.
    - 쓰레드 생성에 제한이 없다.
        - 고객 요청이 너무 많이 오면, CPU, 메모리 임계점을 넘어서 서버가 죽을 수 있다.

#### 쓰레드 풀

- 정의
    - WAS 내부에 미리 쓰레드를 만들어서 가지고 있는 관리 장소
- 특징
    - 쓰레드 풀에 생성 가능한 쓰레드의 최대치를 관리한다.
    - 톰캣은 최대 200개가 기본 설정 (변경 가능)
    - 필요한 쓰레드를 쓰레드 풀에 보관하고 관리한다.
- 사용
    - 쓰레드가 필요하면, 이미 생성되어 있는 쓰레드를 쓰레드 풀에서 꺼내서 사용한다.
    - 사용을 종료하면 쓰레드 풀에 해당 쓰레드를 반납한다.
    - 최대 쓰레드가 모두 사용중이어서 쓰레드 풀에 쓰레드가 없으면?
        - 기다리는 요청은 거절하거나 특정 숫자만큼만 대기하도록 설정할 수 있다.
- 장점
    - 쓰레드가 미리 생성되어 있으므로, 쓰레드를 생성하고 종료하는 비용(CPU)이 절약되고, 응답 시간이 빠르다.
    - 생성 가능한 쓰레드의 최대치가 있으므로 너무 많은 요청이 들어와도 기존 요청은 안전하게 처리할 수 있다.
- 실무 팁
    - WAS의 주요 튜닝 포인트는 최대 쓰레드(max thread) 수이다.
    - 이 값을 너무 낮게 설정하면?
        - 동시 요청이 많으면, 서버 리소스는 여유롭지만, 클라이언트는 금방 응답 지연
    - 이 값을 너무 높게 설정하면?
        - 동시 요청이 많으면, CPU, 메모리 리소스 임계점 초과로 서버가 다운된다.
    - 장애 발생시?
        - 클라우드면 일단 서버부터 늘리고, 이후에 튜닝한다.
        - 클라우드가 아니면 열심히 튜닝한다.
- 쓰레드 풀의 적정 숫자
    - 다양한 케이스에 맞춰서 직접 테스트하며 찾아봐야 한다.
        - 애플리케이션 로직의 복잡도
        - CPU
        - 메모리
        - IO 리소스 상황
    - 성능 테스트
        - 최대한 실제 서비스와 유사한 상황으로 만들고 성능 테스트를 시도한다.
        - 성능 테스트는 아파치 ab, 제이미터, nGrinder 등을 통해 진행한다.

#### WAS의 멀티 쓰레드 지원

- 멀티 쓰레드에 대한 부분은 WAS가 처리한다.
- 개발자가 멀티 쓰레드 관련 코드를 신경쓰지 않아도 된다.
- 개발자는 마치 싱글 쓰레드 프로그래밍을 하듯이 편리하게 소스 코드를 개발하면 된다.
- 멀티 쓰레드 환경이므로 싱글톤 객체(서블릿, 스프링 빈)는 주의해서 사용해야 한다.

### HTML, HTTP API, CSR, SSR

- 정적 리소스
    - 고정된 HTML 파일, CSS, JS, 이미지, 영상 등을 제공한다.
    - 주로 웹 브라우저에서 요청한다.
- HTML 페이지
    - 동적으로 필요한 HTML 파일을 생성해서 전달한다.
    - 웹 브라우저는 HTML 해석하는 역할을 한다.
- HTTP API
    - HTML이 아니라 데이터를 전달한다.
        - 데이터만 주고 받기 때문에 UI 화면이 필요하면 클라이언트가 별도로 처리해줘야 한다.
    - 주로 JSON 형식을 사용한다.
    - 다양한 시스템에서 호출한다.
        - 앱 (안드로이드, 아이폰, PC 앱)
        - 웹 클라이언트 (React.js, Vue.js 등등)
        - 서버 to 서버
- SSR (서버 사이드 렌더링)
    - HTML 최종 결과를 서버에서 만들어서 웹 브라우저에 전달한다.
    - 주로 정적인 화면에 사용한다.
    - 관련기술
        - JSP
        - 타임리프
- CSR (클라이언트 사이드 렌더링)
    - HTML 결과를 자바스크립트를 사용해 웹 브라우저에서 동적으로 생성해서 적용한다.
    - 주로 동적인 화면에 사용한다.
    - 웹 환경을 마치 앱 처럼 필요한 부분만 변경할 수 있다.
    - 예시
        - 구글 지도
        - Gmail
        - 구글 캘린더
    - 관련기술
        - React.js
        - Vue.js
- 참고
    - Next.js처럼 CSR과 SSR 동시에 지원하는 웹 프레임워크도 있다.
    - SSR을 사용하더라도, 자바스크립트를 사용해서 화면 일부를 동적으로 변경할 수 있다.


### 자바 백엔드 웹 기술 역사

#### 자바 웹 기술 역사

- 과거 기술
    - 서블릿 - 1997
        - HTML 생성이 어려움
    - JSP - 1999
        - HTML 생성은 편리하지만, 비즈니스 로직까지 너무 많은 역할 담당
    - 서블릿, JSP 조합 MVC 패턴 사용
        - 모델, 뷰 컨트롤러로 역할을 나누어 개발
    - MVC 프레임워크 춘추 전국 시대 - 2000년 초 ~ 2010년 초
        - MVC 패턴 자동화, 복잡한 웹 기술을 편리하게 사용할 수 있는 다양한 기능 지원
        - 스트럿츠, 웹워크, 스프링 MVC (과거 버전)
- 현재 사용 기술
    - 애노테이션 기반의 스프링 MVC 등장
        - @Controller
        - MVC 프레임워크의 춘추 전국 시대 마무리
    - 스프링 부트의 등장
        - 스프링 부트는 서버를 내장하고 있다.
        - 과거에는 서버에 WAS를 직접 설치하고, 소스는 War 파일을 만들어서 설치한 WAS에 배포했다.
        - 스프링 부트는 빌드 결과(Jar)에 WAS 서버 포함해서 빌드 배포를 단순화하였다.
- 최신 기술 - 스프링 웹 기술의 분화
    - Web Servlet
        - Spring MVC
    - Web Reactive
        - Spring WebFlux
- 최신 기술 - 스프링 웹 플럭스(WebFlux)
    - 특징
        - 비동기 논블러킹 처리
        - 최소 쓰레드로 최대 성능 => 쓰레드 컨텍스트 스위칭 비용 효율화
        - 함수형 스타일로 개발 => 동시처리 코드 효율화
        - 서블릿 기술 사용 X
    - 단점
        - 기술적 난이도 매우 높음
        - RDB 지원 부족 (현 상황)
        - 일반 MVC의 쓰레드 모델도 충분히 빠르다.
        - 실무에서 아직 많이 사용하지는 않는다. (전체 1% 이하)

#### 자바 뷰 템플릿 역사

- JSP
    - 속도 느림, 기능 부족
- 프리마커(Freemarker), Velocity(벨로시티)
    - 속도 문제 해결, 다양한 기능
- 타임리프(Thymeleaf)
    - 내추럴 템플릿: HTML의 모양을 유지하면서 뷰 템플릿 적용 가능
    - 스프링 MVC와 강력한 기능 통합
    - <b>최선의 선택</b>, 단 성능은 프리마커, 벨로시티가 더 빠름

### 출처

- [스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술](https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-1)