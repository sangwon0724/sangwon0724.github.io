### 메소드

- create
- set
- get
- persist
	- 상태 영속성 구현
	- 저장소 위치
		- 로컬 스토리지
		- 세션 스토리지
- immer
	- 불변성과 중첩 상태 관리
- useShallow
	- 랜더링 최적화 기본
- TypeScript
- DevTools
	- 디버깅

### 설계 및 패턴

- 상태 설계
- 액션 설계
- 비동기 액션 처리
- flux에서 영향받은 zustand 패턴
- Slice 패턴

### 최적화

const { count, increase } = useStore()
스토어의 모든 상태를 구독합니다.

count가 바뀌든, 다른 안 쓰는 값이 바뀌든 → 컴포넌트는 무조건 리렌더링됩니다.

즉, 불필요한 리렌더링이 발생할 가능성 ↑


const { count, increase } = useStore((state) => ({
  count: state.count,
  increase: state.increase,
}))
여기선 { count, increase }만을 선택해서 구독합니다.

Zustand는 내부적으로 **shallow comparison(얕은 비교)**를 수행하여,

count나 increase에 실제 변화가 있을 때만 리렌더링합니다.

그 외 다른 값이 바뀌어도 무시합니다.