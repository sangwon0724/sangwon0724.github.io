---
layout: post
title:  "Firebase Auth 기능 사용하기"
date:   2023-12-14 14:48:00 +0900
categories: Group&nbsp;:&nbsp;JavaScript React
---

### 준비 과정

1. firebase에 대한 KEY 정보를 담고 있는 js 파일로 이동한다.
2. 최상단에 import "firebase/auth";를 추가한다.
  - import할 때 에러가 난다면 "* as"를 지운다. (firebase 8.0.0부터 쓰면 안됨)
  - 8.0.0 이전 : import * as firebase from 'firebase/app'
  - 8.0.0 이후 : import firebase from 'firebase/app'
3. export const authService = firebase.auth();를 작성한다.

### 회원가입 및 로그인 (이메일 + 비밀번호)


- 전제 조건
  - export const authService = firebase.auth(); 필요 => firebase 설정 js 파일
  - import { authService } from "XXX"; 필요 => 기능을 사용할 js 파일
  - 회원가입/로그인 여부 판단하는 변수 존재
- 예시
{% highlight javascript %}
const onSubmit = async (event) => {
    //form의 submit 동작 막기
    event.preventDefault();

    try
    {
        let data;

        if (newAccount) {
            //계정 생성의 경우
            data = await authService.createUserWithEmailAndPassword(
            email,
            password
            );
        }
        else
        {
            //로그인의 경우
            data = await authService.signInWithEmailAndPassword(email, password);
        }
        console.log(data);
    }
    catch (error)
    {
        console.log(error);
    }
};
{% endhighlight %}

### 로그인한 유저의 정보 가져오기

- 전제 조건
  - export const firebaseInstance = firebase; 필요 => firebase 설정 js 파일
  - import { authService } from "XXX"; 필요 => 기능을 사용할 js 파일
- 예시
{% highlight javascript %}
//전제조건 만족 후
authService.onAuthStateChanged((user) => {
    //user에 로그인한 유저의 정보가 들어있다.
    if (user) {
      //로그인에 성공한 경우
    } else {
      //로그인에 실패한 경우
    }
});
{% endhighlight %}
- 현재 로그인 중인 유저 정보 가져오기 : authService.currentUser;
- 참고 : https://firebase.google.com/docs/reference/js/firebase.auth

### 로그인한 유저의 정보 업데이트하기

- 전제조건
  - export const firebaseInstance = firebase; 필요 => firebase 설정 js 파일
  - import { authService } from "XXX"; 필요 => 기능을 사용할 js 파일
  - authService.onAuthStateChanged((user) => {} );를 통해서 유저 정보 가져오기
  - 가져온 유저 정보를 변수에 저장 (예시 : userObj)
- 예시
{% highlight javascript %}
//전제조건 만족 후
const 함수명 = async (event) => {
      await userObj.updateProfile(
        { displayName: newDisplayName }
      );
};
{% endhighlight %}
- 추가 정보
  - displayName이 유저의 닉네임을 가리킨다.

### 소셜로그인 - 일반

- 전제 조건
  - export const firebaseInstance = firebase; 필요 => firebase 설정 js 파일
  - import { authService, firebaseInstance } from "XXX"; 필요 => 기능을 사용할 js 파일
- 예시
{% highlight javascript %}
const onSocialClick = async (event) => {
    const { target: { name } } = event;
    let provider;

    if (name === "google")
    {
        provider = new firebaseInstance.auth.GoogleAuthProvider();
    }
    else if (name === "github")
    {
        provider = new firebaseInstance.auth.GithubAuthProvider();
    }
    const data = await authService.signInWithPopup(provider);
    console.log(data);
};
{% endhighlight %}

- 추후에 콘솔의 계정 메뉴(로그인 종류 설정 페이지)에서 승인된 도메인에 소셜 로그인 기능을 추가할 도메인을 추가한다.
                
-※ 참고 : https://firebase.google.com/docs/reference/js/firebase.auth

### 소셜로그인 - 깃허브
1. 깃허브 페이지로 가서 로그인을 한다.
2. Settings 메뉴로 간다.
3. Developer settings를 클릭한다.
4. OAuth App을 클릭한다.
5. Register a new application을 클릭한다.
6. 앱 이름과 URL을 작성한다.
  - URL은 firebase의 계정 메뉴에서 깃허브 활성화시 나오는 URL을 입력한다.
  - 홈페이지 URL은 콜백 URL과 동일하게 쓰되, 콜백 URL의 주소에서 "__/auth/handler"만 제외한다.
7. Register application을 클릭해서 등록한다.
8. 깃허브에서 앱을 등록했을 때 나오는 Client ID와 Client secrets를 복사해서  
firebase의 콘솔의 계정 메뉴의 깃허브 항목에 붙여넣은 뒤 저장한다.

### 로그아웃

- 전제조건
  - export const authService = firebase.auth();
  - import { authService } from "XXX"; 필요
  - import { useHistory } from "react-router-dom";
- 예시
{% highlight javascript %}
const onLogOutClick = () => {
    authService.signOut();
    history.push("/");
};
{% endhighlight %}