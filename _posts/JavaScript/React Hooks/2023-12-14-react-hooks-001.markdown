---
layout: post
title:  "React Hooks에 대하여"
date:   2023-12-14 09:54:00 +0900
categories: React&nbsp;Hooks
---

### 리액트 훅이란 무엇인가?

- 함수형 컴포넌트에서도 state를 가질수 있게 하여 클래스형 컴포넌트의 기능을 사용할 수 있게 하는 기능
- React의 State Machine에 연결하는 기본적인 방법

### 리액트 훅의 특징

- 훅을 통해서 함수형 컴포넌트에서도 컴포넌트 상태값을 관리할 수 있다.
- 훅을 통해서 컴포넌트 생명 주기 함수 또한 이용할 수 있게 된다.

### 리액트 훅의 장점

- 훅을 사용하게 되면 재사용 가능한 로직을 쉽게 만들 수 있다.
- 훅을 사용하게 되면 같은 로직은 한 곳으로 모아 가독성이 좋다. (경우에 따라 아닌 경우도 있다.)

### 코드 테스트 사이트

- Visual Studio Code 대신 코드를 테스트 할 수 있다.
- 주소 : https://codesandbox.io/

<!--

[정리할 목록]

useState
useInput
useTabs
useEffect
useBeforeLeave
useRef
userFullscreen
useTitle
useClick
useFadeIn
useNetwork
useScroll
useConfirm
usePreventLeave
useNotification
useMemo
useId
useMemo
useCallback
useReducer
useContext

forwardRef
CustomHooks

https://velog.io/@joohyeson/React-Hooks-%EC%A2%85%EB%A5%98
useReducer (복잡한 컴포넌트들의 state를 관리 -분리)
useCallback (특정 함수 재사용)
useMemo (연산한 값 재사용)
useRef (DOM선택, 컴포넌트 안에서 조회/수정할 수 있는 변수 관리)
useImperativeHandle
useLayoutEffect
useDebugValue

https://kyung-a.tistory.com/38
useTransition
useDeferreValue
useInsertionEffect

https://ko.legacy.reactjs.org/docs/hooks-reference.html
useState
useEffect
useContext
useReducer
useCallback
useMemo
useRef
useImperativeHandle
useLayoutEffect
useDebugValue
useDeferredValue
useTransition
useId
Library Hooks
useSyncExternalStore
useInsertionEffect


-->