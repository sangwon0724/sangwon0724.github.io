---
layout: post
title:  "[JPA 기본] 다양한 연관관계 매핑"
date:   2024-01-25 23:52:00 +0900
categories: JPA
tags: [연관관계, JPA 연관관계]
---

### 연관관계 매핑시 고려사항 3가지

- 다중성
    - 다대일
        - @ManyToOne
    - 일대다
        - @OneToMany
    - 일대일
        - @OneToOne
    - 다대다
        - @ManyToMany
        - 실무에서 쓰면 안 된다.
- 방향
    - 테이블
        - 외래 키 하나로 양쪽 조인 가능
        - 사실 방향이라는 개념이 없다.
    - 객체
        - 참조용 필드가 있는 쪽으로만 참조 가능
        - 한쪽만 참조하면 단방향
        - 양쪽이 서로 참조하면 양방향
            - 객체 입장에서는 방향이 하나다.
            - 단방향이 2개인 것이다.
- 연관관계의 주인
    - 테이블은 외래 키 하나로 두 테이블이 연관관계를 맺음
    - 객체 양방향 관계는 A → B, B → A 처럼 참조가 2군데
    - 객체 양방향 관계는 참조가 2군데 있음. 둘중 테이블의 외래 키를 관리할 곳을 지정해야함
    - 연관관계의 주인
        - 외래 키를 관리하는 참조
    - 주인의 반대편
        - 외래 키에 영향을 주지 않는다.
        - 단순 조회만 가능하다.

### 다대일 (N:1)

- 다대일 중에서 다(N)에 해당하는 객체가 연관 관계의 주인이다.

#### 단방향

- 가장 많이 사용하는 연관관계
- <b>다대일</b>의 반대는 <b>일대다</b>

<img src="{{site.url}}{{site.baseurl}}{{site.post_img_root}}/jpa_002.png"/>

{% highlight java %}
@Entity
@Data
public class Team {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@JoinColumn(name = "TEAM_ID")
	private Long id;

	@Column(name = "NAME")
	private String name;
}
{% endhighlight %}

{% highlight java %}
@Entity
@Data
public class Member { 
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "MEMBER_ID")
	private Long id;
	
	@Column(name = "USERNAME")
	private String username;
	
	@ManyToOne
	@JoinColumn(name = "TEAM_ID") //외래키
	Team team;
}
{% endhighlight %}

{% highlight java %}
Team team = new Team();
team.setName("TeamA");
em.persist(team);

Member member = new Member();
member.setUsername("member1");
member.setTeam(team);
em.persist(member);

tx.commit();
{% endhighlight %}

#### 양방향

- 외래 키가 있는 쪽이 연관관계의 주인이 된다.
- 양쪽을 서로 참조하도록 개발한다.

<img src="{{site.url}}{{site.baseurl}}{{site.post_img_root}}/jpa_003.png"/>

{% highlight java %}
@Entity
@Data
public class Member { 
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "MEMBER_ID")
	private Long id;
	
	@Column(name = "USERNAME")
	private String username;
	
	@ManyToOne
	@JoinColumn(name = "TEAM_ID") //외래키
	Team team;
	
	//연관관계 편의 메소드
	//java의 getter/setter 관례때문에 setXXX가 아닌 다른 동사로 사용할 필요가 있다.
	public void changeTeam(Team team) {
		this.team = team;
		team.getMembers().add(this);
	}
}
{% endhighlight %}

{% highlight java %}
@Entity
@Data
public class Team {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@JoinColumn(name = "TEAM_ID")
	private Long id;

	@Column(name = "NAME")
	private String name;
	
	@OneToMany(mappedBy = "team") //참조하는 객체명
	private List<Member> members = new ArrayList<>();
	
	//연관관계 편의 메소드
    //(※ 연관관계 편의 메소드가 양쪽에 다 있으면 문제과 될수 있으니 기준을 둬서 한 쪽에만 둬야한다.)
	/*
	public void addMember(Member member) {
		member.setTeam(this);
		members.add(member);
	}
	*/
}
{% endhighlight %}

{% highlight java %}
Team team = new Team();
team.setName("TeamB");
em.persist(team);

Member newMember = new Member();
newMember.setUsername("member3");
newMember.setTeam(team);
em.persist(newMember); //INSERT 실행 (IDENTITY)

//★ em.persist 이후에 아래 2줄이 동작해야지, DB에서 데이터를 깔끔하게 값을 가져올수 있다.
em.flush(); 
em.clear();

Member findMember = em.find(Member.class, newMember.getId()); //SELECT 실행
if(findMember != null) {
    System.out.println("조회 결과가 있습니다.");
    
    List<Member> members = findMember.getTeam().getMembers(); //SELECT 실행
    
    for (Member member : members) {
        System.out.println(member.getId() + " / " + member.getUsername());
    }
} else {
    System.out.println("조회 결과가 없습니다.");
}

tx.commit();
{% endhighlight %}

### 일대다 (1:N)

- 권장하지 않는 모델
- 실무에서 많이 사용되지는 않는다.
- 일대다 중에서 일(1)에 해당하는 객체가 연관 관계의 주인이다.
- 객체와 테이블의 차이 때문에 반대편 테이블의 외래 키를 관리하는 특이한 구조
- @JoinColumn을 꼭 사용해야 한다.
    - 그렇지 않으면 조인 테이블 방식을 사용한다. (중간에 테이블을 하나 추가한다.)
- 추가로 발생하는 UPDATE 쿼리로 인해 성능상 좋지 않다.
- 엔티티를 매핑한 테이블이 아닌 다른 테이블의 외래 키를 관리해야 하다보니 구조가 더 복잡해진다.

#### 단방향

<img src="{{site.url}}{{site.baseurl}}{{site.post_img_root}}/jpa_004.png"/>

- 일대다 단방향 매핑의 단점
    - 엔티티가 관리하는 외래 키가 다른 테이블에 있음
    - 연관관계 관리를 위해 추가로 UPDATE SQL 실행
    - <b>일대다 단방향 매핑보다는 다대일 양방향 매핑을 사용하는 것이 권장된다.</b>

#### 양방향

<img src="{{site.url}}{{site.baseurl}}{{site.post_img_root}}/jpa_005.png"/>

- 일대다 양방향 매핑의 문제점
    - 공식적으로 존재하는 매핑 방법이 아니다.
    - @JoinColumn(insertable=false, updatable=false)
    - 읽기 전용 필드를 사용해서 양방향처럼 사용하는 방법이다.
    - <b>일대다 양방향 매핑보다는 다대일 양방향 매핑을 사용하는 것이 권장된다.</b>

{% highlight java %}
{% endhighlight %}

### 일대일 (1:1)

- <b>일대일</b> 관계는 그 반대도 <b>일대일</b>
- 주 테이블이나 대상 테이블 중에서 외래 키를 갖고 있을 테이블을 선택할 수 있다.
- 외래 키에 데이터베이스 유니크(UK) 제약조건을 추가한다.

#### 주 테이블에 외래 키 단방향

- 다대일(@ManyToOne) 단방향 매핑과 유사하다.

<img src="{{site.url}}{{site.baseurl}}{{site.post_img_root}}/jpa_006.png"/>

#### 대상 테이블에 외래 키 양방향

- 다대일 양방향 매핑 처럼 외래 키가 있는 곳이 연관관계의 주인이다.
- 반대편은 mappedBy를 적용한다.

<img src="{{site.url}}{{site.baseurl}}{{site.post_img_root}}/jpa_007.png"/>

#### 대상 테이블에 외래 키 단방향

- 단방향 관계는 JPA가 지원되지 않는다.

<img src="{{site.url}}{{site.baseurl}}{{site.post_img_root}}/jpa_008.png"/>

#### 대상 테이블에 외래 키 양방향

- 일대일 주 테이블에 외래 키 양방향과 매핑 방법은 같다.

<img src="{{site.url}}{{site.baseurl}}{{site.post_img_root}}/jpa_009.png"/>

#### 정리

- 주 테이블에 외래 키
    - 주 객체가 대상 객체의 참조를 가지는 것 처럼 주 테이블에 외래 키를 두고 대상 테이블을 찾음
    - 객체지향 개발자 선호
    - JPA 매핑 편리
    - 장점
        - 주 테이블만 조회해도 대상 테이블에 데이터가 있는지 확인 가능
    - 단점
        - 값이 없으면 외래 키에 null 허용
- 대상 테이블에 외래 키
    - 대상 테이블에 외래 키가 존재
    - 전통적인 데이터베이스 개발자 선호
    - 장점
        - 주 테이블과 대상 테이블을 일대일에서 일대다 관계로 변경할 때 테이블 구조 유지
    - 단점
        - 프록시 기능의 한계로 지연 로딩으로 설정해도 항상 즉시 로딩됨

### 다대다 (N:M)

- 관계형 데이터베이스는 정규화된 테이블 2개로 다대다 관계를 표현할 수 없다.
- 연결 테이블을 추가해서 일대다, 다대일 관계로 풀어내야 한다.
- @ManyToMany 사용
- @JoinTable로 연결 테이블 지정
- 단방향, 양방향 가능
- 편리해 보이지만 실무에서 사용하지 않는다.
- 연결 테이블이 단순히 연결만 하고 끝나지 않는다.
    - 필요한 데이터가 추가될 수도 있다.

<img src="{{site.url}}{{site.baseurl}}{{site.post_img_root}}/jpa_010.png"/>

- 연결 테이블을 엔티티로 승격시켜서 다대다 매핑의 한계를 극복할 수 있다.

<img src="{{site.url}}{{site.baseurl}}{{site.post_img_root}}/jpa_011.png"/>

### 공통 코드

{% highlight java %}
EntityManagerFactory emf = Persistence.createEntityManagerFactory("hello"); //애플리케이션 전체 공유 (persistence.xml 참조)
EntityManager em = emf.createEntityManager(); //한번 쓰고 버려야함, 쓰레드간 공유하지 않음
EntityTransaction tx = em.getTransaction(); //조회를 제외한 DML 작업시 필수로 사용
tx.begin();

try {
    //실행 내용
} catch (Exception e) {
    e.printStackTrace();
    tx.rollback();
} finally {
    em.close();
}

emf.close();
{% endhighlight %}

### 출처

- [자바 ORM 표준 JPA 프로그래밍 - 기본편](https://www.inflearn.com/course/ORM-JPA-Basic#curriculum)