---
layout: post
title:  "이미지(Image)와 컨테이너(Container)"
date:   2025-02-11 07:00:00 +0900
categories: Docker
tags: []
published: false
---

### 이미지란?

### 도커 허브

[도커 허브](https://hub.docker.com/)는 컨테이너에서 사용할 이미지를 관리하는 이름 그대로 `허브(Hub)` 역할을 하는 저장소다.  
`Maven Repository`같은 곳이라고 생각하면 된다.

명령어를 통해 이미지를 업로드 및 다운로드할 수 있다.

### 이미지 관련 명령어

#### 이미지 다운로드

`docker pull 이미지명:태그명`처럼 사용한다.  
태그명 대신에 `latest`라고 붙이면 가장 최신 버전으로 다운받는다.  
태그명을 아예 생략해도 되는데, 생략하면 `latest`를 붙이는 것과 동일하게 동작한다.

- 예시
    - `docker pull nginx`

#### 이미지 조회하기

#### 명령어

`docker image ls`를 사용한다.  
명령어를 실행하면 각 이미지에 대한 정보를 얻을 수 있다.

#### 출력 정보

- `REPOSITORY`
    - 이미지명
- `TAG`
    - 이미지 태그명
- `IMAGE ID`
    - 이미지 ID
- `CREATED`
    - 이미지가 생성된 날짜 (다운받은 날짜 X)
- `SIZE`
    - 이미지 크기

#### 이미지 삭제하기

우선 알아야 하는 것은 이미지는 기본적으로는 어느 컨테이너에서도 사용하지 않는 것만 삭제할 수 있다.  
집 지어놨는데 기둥 빼면 무너지니까 못 빼는 거라고 생각하면 된다.  
물론 강제로 삭제하는 방법이 있긴 하다.

우선 `docker image rm [이미지 ID or 이미지명]`을 통해 특정 이미지만 삭제할 수 있다.  
기본적으로는 어느 컨테이너에서도 사용 중이지 않은 이미지만 삭제할 수 있다.  
그리고 신기한 점은 이미지 ID는 전체를 입력하지는 않아도 실행이 된다.  
하지만 일부만 입력하게 된다면 그 일부 입력한 ID에 해당하는 이미지가 단 1개여야 한다.

물론 컨테이너에서 사용 중인 이미지를 삭제하는 방법도 있다.  
`docker image rm -f [이미지 ID or 이미지명]`를 실행하면 된다.  
다만 "중지된 컨테이너"에서만 실행 가능하고, "실행 중인 컨테이너"에서는 불가능하다.

`docker image rm $(docker images -q)`를 통해서 전체 이미지를 삭제하는 방법도 있다.  
아까 설명했듯이 기본적으로 이미지를 삭제하는 것은 어느 컨테이너에서도 사용하지 않은 이미지만 삭제할 수 있기에,  
기본적으로는 전체 삭제할 때도 동일하게 어느 컨테이너에서도 사용하지 않은 이미지만 삭제된다.  
하지만 예외는 있듯이 이 때도 `-f` 옵션을 추가한다면 "중지된 컨테이너"에서 사용 중인 이미지까지는 삭제할 수 있다.

참고로 `docker images -q`는 시스템에 있는 모든 이미지의 정보를 반환하는 명령어다.  
다만 `docker image ls`의 차이점은 순수하게 이미지의 ID만 반환한다는 것이다.

### 컨테이너란?

### 컨테이너 조회하기

`docker ps` 명령어를 통해 실행 중인 컨테이너 목록을 확인할 수 있다.  
모든 컨테이너를 조회하고 싶다면 `-a` 옵션을 추가해서  
`docker ps -a` 명령어를 실행하면 모든 컨테이너 목록을 확인할 수 있다.

- `CONTAINER ID`
    - 컨테이너 아이디
- `IMAGE`
    - 이미지명
<!-- - `COMMAND` -->
- `CREATED`
    - 컨테이너가 생성된 후 경과된 시간
- `STATUS`
    - 현재 컨테이너의 상태
    - 현재 컨테이너의 상태로 변경된 후 경과된 시간
- `PORTS`
    - 사용 중인 포트 번호
- `NAMES`
    - 해당 컨테이너의 별칭
    - 해당 컨테이너 실행 시 `--name` 옵션을 사용하면 노출된다.

### 컨테이너 생성하기

`docker create [이미지 ID or 이미지명]`을 통해 컨테이너를 생성할 수 있다.  
우선 로컬 환경에 다운받은 이미지가 있는지 확인해서 있다면 해당 이미지로,  
없다면 자동으로 `도커 허브`에서 다운받아서 컨테이너를 생성한다.

- 예시
    - `docker create nginx`

### 컨테이너 실행하기

`docker start [컨테이너 ID or 컨테이너명]`을 통해 컨테이너를 실행할 수 있다.  
정상적으로 실행되었다면 `docker ps`에서 확인 가능하다.

### 컨테이너 생성 및 실행하기

`docker run [컨테이너 ID or 컨테이너명]`을 통해 컨테이너를 생성한 후에 바로 실행할 수 있다.  
`docker create` 명령어와 동일하게 로컬 이미지가 있다면 로컬 이미지로,  
없다면 도커 허브에서 이미지를 다운로드 받아서 컨테이너를 생성한다.

### 컨테이너 중지하기

`docker stop [컨테이너 ID or 컨테이너명]`를 통해 컨테이너를 중지할 수 있다.

`docker kill [컨테이너 ID or 컨테이너명]`를 통해서도 컨테이너를 중지시킬 수도 있는데,  
`docker stop`은 컴퓨터를 시스템 종료 버튼을 통해 종료하는 것이고,  
`docker kill`은 컴퓨터를 본체 버튼을 눌러서 강제 종료하는 것이나 다름이 없다.

정상적인 서비스 동작을 위해서는 `docker stop`을 사용하도록 하자.
참고로 포그라운드(foreground)에서 동작 중이라면 `Ctrl + C`를 통해서 중지시킬수도 있다.

### 컨테이너 삭제하기

`docker rm [컨테이너 ID]`를 통해 컨테이너를 삭제할 수 있다.  
컨테이너는 중지된 컨테이너만 삭제할 수 있으며,  
실행 중인 컨테이너를 바로 삭제하려고 하면  
`Error response from daemon: cannot remove container "xxx": container is running: stop the container before removing or force remove`라는  
메시지가 출력된다.

만약에 실행 중인 컨테이너를 바로 삭제하고 싶다면 `-f` 옵션을 추가해서  
`docker rm -f [컨테이너 ID]` 명령어를 실행하면 실행 중인 컨테이너를 바로 삭제할 수 있다.

또한 이미지를 삭제할 때처럼 컨테이너 ID 대신에 `$(docker ps -qa)`를 추가하면  
모든 컨테이너에 대해서 처리할 수 있다.  
`docker rm $(docker ps -qa)`를 실행하면 정지되어 있는 모든 컨테이너를 삭제할 수 있고,  
`docker rm -f $(docker ps -qa)`를 실행하면 실행 중인 모든 컨테이너를 삭제할 수 있다.

### 출처

[비전공자도 이해할 수 있는 Docker 입문/실전](https://www.inflearn.com/course/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90-docker-%EC%9E%85%EB%AC%B8-%EC%8B%A4%EC%A0%84)
[[Docker] 도커 이미지와 컨테이너 삭제 방법](https://brunch.co.kr/@hopeless/10)