---
layout: post
title:  "Firebase Storage 기능 사용하기"
date:   2023-12-14 15:20:00 +0900
categories: React
published: false
---

### 준비 과정

1. firebase에 대한 KEY 정보를 담고 있는 js 파일로 이동한다.
2. 최상단에 import "firebase/storage";를 추가한다
3. export const storageService = firebase.storage();를 추가한다.

### 파일 정보 가져오기 + 이미지 미리보기

- 기본 틀
{% highlight javascript %}
<input type="file" accept="image/*" onChange={onFileChange} />

const [attachment, setAttachment] = useState();

const onFileChange = (event) => {
    const {
      target: { files },
    } = event;
    const theFile = files[0];
    const reader = new FileReader();
    reader.onloadend = (finishedEvent) => {
        const {
          currentTarget: { result },
        } = finishedEvent;
        setAttachment(result);
    };
    reader.readAsDataURL(theFile);
};

{attachment && (
    <div>
        <img src={attachment} width="50px" height="50px" />
        <button onClick={onClearAttachment}>Clear</button>
    </div>
)}
{% endhighlight %}
- 추가 정보
  - event.target.files[0]은 file 태그에 올라온 파일의 정보를 가리킨다.
  - FileReader.onloadend는 FileReader가 읽기 동작이 끝났을 때마다 발생시키는 이벤트다.
  - reader.readAsDataURL(theFile);은 읽어들인 파일의 정보를 데이터 URL로 만드는 방법이다.
  - 데이터 URL로 만들어진 파일의 정보는 reader.onloadend를 통해서  
  e.target.result 또는 e.currentTarget.result로 받을 수 있다.

### 파일 업로드

- 전제 조건
  - 해당 프로젝트의 터미널에서 npm install uuid 입력  
  (식별자명을 랜덤으로 만들어주는 기능, 랜덤 함수를 직접 만들어서 대체 가능)
  - 해당 기능을 사용할 js 파일에 가서 import { v4 as uuidv4 } from "uuid";를 통해서 import 하기
  - export const storageService = firebase.storage(); 필요 => firebase 설정 js 파일
  - import { storageService } from "XXX"; 필요 => 기능을 사용할 js 파일
- 기본 틀
{% highlight javascript %}
const onSubmit = async (event) => {
    event.preventDefault();

    let attachmentUrl = "";

    if (attachment != "") {
        const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);
        const response = await attachmentRef.putString(attachment, "data_url");
        attachmentUrl = await response.ref.getDownloadURL();
    }
};
{% endhighlight %}
- 추가 정보
  - attachment는 데이터 URL화 시킨 파일을 가리킨다.
  - storageService.ref()는 루트 폴더를 가리킨다.
  - storageService.ref().child("폴더명/파일명");을 통해서 원하는 위치에 원하는 파일명을 지정한다.
  - fileRef.putString(attachment, "data_url");를 통해서 업로드한다.
  - attachmentUrl = await response.ref.getDownloadURL();을 통해서 업로드한 파일이 업로드 된 실제 경로를 알 수 있다.

### 파일 삭제

- 전제조건
  - import { dbService, storageService } from "myDatabase";

- 기본 틀
{% highlight javascript %}
const onDeleteClick = async () => {
    const ok = window.confirm("Are you sure you want to delete this nweet?");
    if (ok) {
        await dbService.doc(`nweets/${nweetObj.id}`).delete(); //데이터베이스 삭제
        await storageService.refFromURL(nweetObj.attachmentUrl).delete(); //스토리지 삭제
    }
};
{% endhighlight %}
- 추가 정보
  - attachmentUrl는 글을 작성할 때 같이 업로드한 파일의 업로드 주소다.
  - storageService.refFromURL(주소)는 참조하고 있는 주소를 통해서 파일의 관리를 할 수 있다.