---
layout: post
title:  "[QueryDSL] 기본 문법"
date:   2024-03-13 22:54:00 +0900
categories: JPA
published: false
---

### JPQL과 QueryDSL

- Querydsl은 JPQL 빌더 역할을 한다.
- 차이점
    - JPQL
        - 문자열로 작성하기 때문에 실행 시점에 오류를 찾아낸다.
        - 직접 파라미터 바인딩을 해줘야 한다.
    - Querydsl
        - 코드로 작성하기 때문에 컴파일 시점 오류를 찾아낸다.
        - 자동으로 파라미터를 바인딩 해준다.

### 맛보기

#### JPQL

{% highlight java %}
String qlString = "select m from Member m  where m.username = :username";

Member findMember =
    em.createQuery(qlString, Member.class)
    .setParameter("username", "member1")
    .getSingleResult();
{% endhighlight %}

#### QueryDSL

- `EntityManager` 로 `JPAQueryFactory`를 생성한다.

{% highlight java %}
JPAQueryFactory queryFactory = new JPAQueryFactory(em);
QMember m = new QMember("m");

Member findMember =
    queryFactory
    .select(m)
    .from(m)
    .where(m.username.eq("member1")) //파라미터 바인딩 처리
    .fetchOne();
{% endhighlight %}

### JPAQueryFactory를 공통 필드로 사용하기

- JPAQueryFactory를 필드로 제공할 때 동시성 문제는 걱정하지 않아도 된다.
- JPAQueryFactory를 생성할 때 제공하는 EntityManager가 해결해준다.
- 스프링 프레임워크는 여러 쓰레드에서 동시에 같은 EntityManager에 접근해도, 트랜잭션 마다 별도의 영속성 컨텍스트를 제공한다.

{% highlight java %}
@PersistenceContext
EntityManager em;

JPAQueryFactory queryFactory;

@BeforeEach
public void before() {
    queryFactory = new JPAQueryFactory(em);
    //...
}
{% endhighlight %}

### Q클래스 인스턴스를 사용하는 방법

- 기본적으로는 인스턴스 방식을 사용한다.
- 별칭은 서브 쿼리를 작성할 때 주로 사용된다.

{% highlight java %}
QMember qMember = new QMember("m"); //별칭 직접 지정
QMember qMember = QMember.member; //기본 인스턴스 사용
{% endhighlight %}

- 기본 인스턴스를 static import해서 사용할 수도 있다.

{% highlight java %}
import static study.querydsl.entity.QMember.member;
{% endhighlight %}

### 기본 검색

- 실제 SQL을 작성하듯이 작성한다.

{% highlight java %}
List<Member> result =
    queryFactory
    .select(member)
    .From(member)
    .fetch();
{% endhighlight %}

- select 메소드와 from 메소드에서 사용되는 Q-Type을 경우에는 selectFrom 메소드를 사용할 수 있다.

{% highlight java %}
List<Member> result =
    queryFactory
    .selectFrom(member)
    .fetch();
{% endhighlight %}

### 조건 검색

- `where(Predicate... o)` 메소드를 활용해서 조회 조건을 추가할 수 있다.
- `Predicate` 클래스를 통해서 조건을 나타낸다.
- 만약에 검색 조건 메소드에 파라미터로 들어간 값이 null이라면 해당 조건은 무시된다.
    - 예시 : MyBatis

{% highlight java %}
Member findMember =
    queryFactory
    .selectFrom(member)
    .where(
            member.username.eq("member1")
            ,member.age.eq(10)
    )
    .fetchOne();
{% endhighlight %}

{% highlight sql %}
select
    m1_0.member_id,
    m1_0.age,
    m1_0.team_id,
    m1_0.username 
from
    member m1_0 
where
    m1_0.username=? 
    and m1_0.age=?
{% endhighlight %}

- `and()`나 `or()`를 통해서 체인을 걸 수 도 있다.
- `Predicate`를 쉼표로 구분하면 각 조건문끼리는 AND로 연결된다.

{% highlight java %}
Member findMember =
    queryFactory
    .selectFrom(member)
    .where(
            member.username.eq("member1").and(member.age.eq(10))
    )
    .fetchOne();
{% endhighlight %}

{% highlight sql %}
select
    m1_0.member_id,
    m1_0.age,
    m1_0.team_id,
    m1_0.username 
from
    member m1_0 
where
    m1_0.username=? 
    and m1_0.age=?
{% endhighlight %}

- `WHERE A AND (B OR C)`같은 복합 조건도 사용할 수 있다.

{% highlight java %}
Member findMember =
    queryFactory
    .selectFrom(member)
    .where(
            member.username.eq("member1")
            ,member.age.eq(10).or(member.age.eq(20))
    )
    .fetchOne();
{% endhighlight %}

{% highlight java %}
select
    m1_0.member_id,
    m1_0.age,
    m1_0.team_id,
    m1_0.username 
from
    member m1_0 
where
    m1_0.username=? 
    and (
        m1_0.age=? 
        or m1_0.age=?
    )
{% endhighlight %}

### 검색 조건 메소드

| 역할 | 메소드명 | 사용 예시 | SQL |
|-------|--------|---------|
| 같은지 비교 | eq | member.username.eq("member1") | username = 'member1' |
| 같지 않은지 비교 | ne | member.username.ne("member1") | username != 'member1' |
| 부정 연산 | not | member.username.eq("member1").not() | username != 'member1' |
| NOT NULL 체크 | isNotNull | member.username.isNotNull() | username is not null |
| 포함 여부 확인 | in | member.age.in(10, 20) | age in (10,20) |
| 미포함 여부 확인 | notIn | member.age.notIn(10, 20) | age not in (10, 20) |
| 범위 검색 | between | member.age.between(10, 30) | between 10, 30 |
| XX 이상 | goe | member.age.goe(30) | age >= 30 |
| XX 초과 | gt | member.age.gt(30) | age > 30 |
| XX 이하 | loe | member.age.loe(30) | age <= 30 |
| XX 미만 | lt | member.age.lt(30) | age < 30 |
| 패턴에 의한 부분 일치 검색 | like | member.username.like("member%") | username like 'member%' |
| 부분 일치 검색 | contains | member.username.contains("member") | username like '%member%' |
| 지정 문자열로 시작하는 부분 검색 | startsWith | member.username.startsWith("member") | username like 'member%' |
| 지정 문자열로 끝는 부분 검색 | endsWith | member.username.endsWith("member") | username like '%member' |

- 이외에도 수많은 검색 조건 메소드가 존재한다.

### 결과 조회
### 정렬
### 페이징
### 집합
### 조인 - 기본 조이
### 조인 - on절
### 조인 - 페치 조인
### 서브 쿼리
### Case문
### 상수, 문자 더하기

### 출처

- [실전! Querydsl](https://www.inflearn.com/course/querydsl-%EC%8B%A4%EC%A0%84)