---
layout: post
title:  "컴포넌트"
date:   2023-12-14 00:18:00 +0900
categories: React
---

### 컴포넌트의 특징

- 리액트는 컴포넌트와 함께 동작한다.
- 리액트 앱은 하나의 컴포넌트만을 랜더링 해야한다. (App)
- 새로운 기능을 추가할 때에는 App.js에 추가한다.
- 컴포넌트는 &lt;App/>처럼 html코드처럼 사용되지만 엄연한 하나의 함수다.
- 리액트는 컴포넌트를 가져와서 브라우저가 이해할 수 있는 평범한 일반 html로 만든다.
- 리액트의 컴포넌트에 key 속성을 부여해서 각 속성값이 유일하도록 만든다.
  - 이유 : 실제 값이 달라도 리액트가 스마트하지않게 작동해서 오류를 일으킨다.
- 리액트에서 class는 js의 클래스를 가리키기 때문에  
return에서 사용되는 html 태그내의 class 속성은
  class가 아닌 className으로 명시해야 한다.
- 리액트에서 for는 js의 반복문을 가리키기 때문에  
return에서 사용되는 label 태그내의 for 속성은 for가 아닌 htmlFor으로 명시해야 한다.

### 함수 컴포넌트 기본 사용 예시

{% highlight javascript %}
//1. 아래 코드 작성
function WhatEver(){
    return <h1>Hello React</h1>;
}
                    
//2. App 함수 안에서 <WhatEver/>를 작성하여 함수를 실행한다.
{% endhighlight %}

### 함수 컴포넌트에 값 전달하기

1. &lt;WhatEver/>라는 컴포넌트가 존재한다고 했을 때 원하는 이름의 속성을 추가한다.
                    
2. WhatEver 함수에 인자로 props (예시)라고 준다.

3. 그럼 다음에 console.log로 props를 출력해보면 해당 컴포넌트가 가지고 있는 속성들에 대한 정보를 알 수 있다.

### 클래스 컴포넌트

- 함수 컴포넌트는 뭔가를 return하고 screen에 표시된다.
- 클래스 컴포넌트는 클래스여야 하지만 리액트 컴포넌트로부터 확장되고 screen에 표시된다.
- 리액트는 자동적으로 모든 클래스 컴포넌트에 있는 render 메소드를 자동으로 실행한다.

### 클래스 컴포넌트 기본 사용 방법

{% highlight javascript %}
class App extends React.Component{
    render(){
    return <h1>Hello</h1>;
    }
}
{% endhighlight %}

### 클래스 컴포넌트에 값 전달하기
    
- state 속성과 setState 함수를 사용해서 속성의 값을 수정한다.
- setState 함수를 쓰게되면 함수가 실행될때마다 자동으로 랜더링되서 값이 변경된다.
- setState 함수를 사용할 때 state 안에 없는 속성을 명시해도 오류는 생기지 않는다.

{% highlight javascript %}
class App extends React.Component {
  state = {
      count: 0
  };
  add = () => {
      this.setState(current => ({ count: current.count + 1 }));
  };
  minus = () => {
      this.setState(current => ({ count: current.count - 1 }));
  };
  render() {
      return (
          <div>
              <h1>The number is: {this.state.count}</h1>
              <button onClick={this.add}>Add</button>
              <button onClick={this.minus}>Minus</button>
          </div>
      );
  }
}
{% endhighlight %}

### 클래스 컴포넌트의 빌드 순서 (첫 빌드시)

1. constructor (내부에 super()가 반드시 필요)
2. render
3. componentDidMount

### 클래스 컴포넌트의 빌드 순서 (업데이트시 = setState 함수 실행시)

1. render
2. componentDidUpdate

<!--
https://tcpschool.com/react/react_component_element
https://tcpschool.com/react/react_component_component
https://tcpschool.com/react/react_component_import
https://tcpschool.com/react/react_component_export
-->