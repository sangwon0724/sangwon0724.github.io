---
layout: post
title:  "화면 구성 위젯 (입력)"
date:   2024-01-10 11:25:00 +0900
categories:  Flutter
---

### TextField

- 텍스트를 입력하는 입력란
- 주로 사용하는 속성
    - TextEditingController? controller
        - 편집 중인 텍스트를 제어하기 위한 컨트롤러
        - null일 경우 TextField에서 자체적으로 생성한다.
    - FocusNode? focusNode
        - 해당 TextField에 대한 포커스 노드 지정
    - InputDecoration? decoration
        - TextField에 대한 스타일
        - 기본 값 : const InputDecoration()
    - TextInputType? keyboardType
        - 키보드 유형
        - text, number, phone, datetime, emailAddress, url 등의 유형이 있다.
    - TextInputAction? textInputAction
        - 키보드에 사용할 작업 버튼 유형
        - TextInputAction.search(검색)이나 TextInputAction.done(완료) 등의 유형이 있다.
    - TextStyle? style
        - 텍스드에 대한 스타일
    - TextAlign textAlign
        - 텍스트 가로 정렬 방법
        - 기본 값 : TextAlign.start
    - TextAlignVertical? textAlignVertical
        - 텍스트의 세로 정렬 방법
    - TextDirection? textDirection
        - 텍스트의 배치 시작 위치
    - bool readOnly
        - 읽기 전용 여부
        - 기본 값 : false
    - bool? showCursor
        - 커서 노출 여부
    - String obscuringCharacter
        - password처럼 대체해서 보여줄 문자
        - 기본 값 : '•'
    - bool obscureText
        - 편집 중인 텍스트를 숨길지에 대한 여부
        - 비밀번호같은 경우에 해당된다.
        - true일 경우에는 필드의 텍스트는 복사 및 자르기가 불가능하다.
        - 기본 값 : false
    - int? maxLines
        - 최대 라인 수
        - 기본 값 : 1
    - int? minLines
        - 최소 라인 수
    - bool expands
        - 기본 값 : false
    - int? maxLength
        - 최대 글자 수
    - Function(String)? onChanged
        - 내부 문자열이 변경되는 경우에 동작할 기능
    - Function()? onEditingComplete
        - 완료 버튼을 눌렀을 때 동작할 기능
    - Function(String)? onSubmitted
        - 필드의 텍스트 편집 완료 시 동작할 기능
    - List&lt;TextInputFormatter>? inputFormatters
        - 유효성 검사 및 형식 목록을 지정한다.
    - bool? enabled
        - 활성화 여부
    - ScrollController? scrollController
        - 스크롤을 컨트롤하기 위한 컨트롤러
        - null일 경우 TextField에서 자체적으로 생성한다.
    - Function(BuildContext, EditableTextState)? contextMenuBuilder
        - 커스텀된 컨텍스트 메뉴 위젯을 설정한다.
        - 기본 값 : _defaultContextMenuBuilder
- [참고](https://api.flutter.dev/flutter/material/TextField-class.html)

{% highlight dart %}
TextField(
    decoration: InputDecoration(
        prefixIcon: Icon(Icons.search),
        suffixIcon: Icon(Icons.clear),
        labelText: 'Outlined',
        hintText: 'hint text',
        helperText: 'supporting text',
        border: OutlineInputBorder(),
    ),
)
{% endhighlight %}

### Form

- 사용자의 입력을 받을 수 있는 다양한 위젯들을 통해 여러 정보들을 하나의 그룹으로 묶어 처리하는 용도
- 주로 사용하는 속성
    - Key? key
        - FormState 유형의 GlobalKey를 지정한다.
    - Widget child
        - 내부에 표시할 자식 위젯
        - Column같은 위젯을 많이 쓴다.
        - 필수
    - bool? canPop
        - false일 경우 현재 경로가 pop되는 것을 막는다.
    - void Function(bool)? onPopInvoked
        - pop이 처리된 후에 동작할 기능
    - void Function()? onChanged
        - Form 위젯 내부의 FormField 계열 위젯들의 상태가 변경되면 호출된다.
    - AutovalidateMode? autovalidateMode
        - 종류
            - AutovalidateMode.onUserInteraction
                - 컨텐츠가 변경된 후에만 자동 유효성 검사가 수행된다.
            - AutovalidateMode.always
                - 사용자 상호 작용 없이도 자동 유효성 검사가 수행된다.
            - AutovalidateMode.disabled
                - 자동 유효성 검사가 비활성화된다.
        - 기본 값 : AutovalidateMode.disabled
- 관련 위젯 목록
    - TextFormField
    - DropdownButtonFormField
- [참고](https://api.flutter.dev/flutter/widgets/Form-class.html)

{% highlight dart %}
final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

Form(
    key: _formKey,
    child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
            TextFormField(
                decoration: const InputDecoration(
                    hintText: '이메일을 입력해 주세요.',
                ),
                onSaved: (value) {
                    print("이메일 :$value");
                },
                validator: (String? value) {
                        if (value == null || value.isEmpty) {
                        return '이메일이 입력되지 않았습니다.';
                    }
                    return null;
                },
            ),
            Padding(
                padding: const EdgeInsets.symmetric(vertical: 16.0),
                child: ElevatedButton(
                    onPressed: () {
                        //데이터가 유효한 경우
                        if (_formKey.currentState!.validate()) {
                            //데이터에 대한 처리
                            _formKey.currentState!.save(); //Form 저장하기
                        }
                    },
                    child: const Text('저장'),
                ),
            ),
        ],
    ),
)
{% endhighlight %}

#### TextFormField

- 주로 사용하는 속성
    - TextEditingController? controller
        - 편집 중인 텍스트를 제어하기 위한 컨트롤러
        - null일 경우 TextFormField에서 자체적으로 생성하고  
        해당 컨트롤러의 텍스트를 initialValue로 초기화한다.
    - String? initialValue
        - 초기 값
    - FocusNode? focusNode
        - 해당 TextFormField에 대한 포커스 노드 지정
    - InputDecoration? decoration
        - TextField에 대한 스타일
        - 기본 값 : const InputDecoration()
    - TextInputType? keyboardType
        - 키보드 유형
        - text, number, phone, datetime, emailAddress, url 등의 유형이 있다.
    - TextInputAction? textInputAction
        - 키보드에 사용할 작업 버튼 유형
        - TextInputAction.search(검색)이나 TextInputAction.done(완료) 등의 유형이 있다.
    - TextStyle? style
        - 텍스드에 대한 스타일
    - TextAlign textAlign
        - 텍스트 가로 정렬 방법
        - 기본 값 : TextAlign.start
    - TextAlignVertical? textAlignVertical
        - 텍스트의 세로 정렬 방법
    - TextDirection? textDirection
        - 텍스트의 배치 시작 위치
    - bool autofocus
        - 자동 포커스 여부
        - 기본 값 : false
    - bool readOnly
        - 읽기 전용 여부
        - 기본 값 : false
        - 커서 노출 여부
    - String obscuringCharacter
        - password처럼 대체해서 보여줄 문자
        - 기본 값 : '•'
    - bool obscureText
        - 편집 중인 텍스트를 숨길지에 대한 여부
        - 비밀번호같은 경우에 해당된다.
        - true일 경우에는 필드의 텍스트는 복사 및 자르기가 불가능하다.
        - 기본 값 : false
        - 기본 값 : true
    - int? maxLines
        - 최대 라인 수
        - 기본 값 : 1
    - int? minLines
        - 최소 라인 수
    - bool expands
        - 기본 값 : false
    - int? maxLength
    - int? maxLength
        - 최대 글자 수
    - Function(String)? onChanged
        - 내부 문자열이 변경되는 경우에 동작할 기능
    - Function()? onEditingComplete
        - 완료 버튼을 눌렀을 때 동작할 기능
    - Function(String)? onFieldSubmitted
        - 필드의 텍스트 편집 완료 시 동작할 기능
    - Function(String?)? onSaved
        - FormState나 Form을 통해서 저장됬을 때 동작할 기능
    - String? Function(String?)? validator
        - 유효성 검증을 진행하는 방법
        - 유효성에 문제가 있는 경우에는 해당 상황에 대한 오류 메시지를 반환한다.
    - List&lt;TextInputFormatter>? inputFormatters
        - 유효성 검사 및 형식 목록을 지정한다.
    - bool? enabled
        - 활성화 여부
    - bool? enableInteractiveSelection
        - 텍스트 관련 기능 사용가능 여부
        - 잘라내기/복사/붙여넣기 등의 기능이 포함된다.
    - Widget? Function(BuildContext, {required int currentLength, required bool isFocused, required int? maxLength})? buildCounter
        - 글자 수를 나타내기 위한 위젯을 만드는 방법을 명시한다.
    - Iterable&lt;String>? autofillHints
        - 자동 완성 서비스가 해당 TextFormField의 유형을 식별하는데 도움을 주기 위한 문자열 목록
        - AutofillHints 클래스에 관련 값들이 명시되어 있다.
    - AutovalidateMode? autovalidateMode
        - 종류
            - AutovalidateMode.onUserInteraction
                - 컨텐츠가 변경된 후에만 자동 유효성 검사가 수행된다.
            - AutovalidateMode.always
                - 사용자 상호 작용 없이도 자동 유효성 검사가 수행된다.
            - AutovalidateMode.disabled
                - 자동 유효성 검사가 비활성화된다.
    - ScrollController? scrollController
        - 스크롤을 컨트롤하기 위한 컨트롤러
        - null일 경우 TextFormField에서 자체적으로 생성한다.
    - Widget Function(BuildContext, EditableTextState)? contextMenuBuilder
        - 커스텀된 컨텍스트 메뉴 위젯을 설정한다.
        - 기본 값 : _defaultContextMenuBuilder
        - 기본 값 : DragStartBehavior.start

#### DropdownButtonFormField

- 주로 사용하는 속성
    - List&lt;DropdownMenuItem&lt;Object?>>? items
        - 사용자가 선택할 수 있는 항목 목록
        - null 경우 해당 드롭다운 버튼은 비활성화 된다.
        - 필수
    - List&lt;Widget> Function(BuildContext)? selectedItemBuilder
        - 항목 목록을 생성하는 빌더 메소드
    - Object? value
        - 현재 선택된 값
        - value가 null이고 버튼이 활성화된 경우는 hint가 표시된다.
        - value가 null이고 버튼이 비활성화된 경우는 disabledHint가 표시된다.
    - Widget? hint
        - placeholder 유형 위젯
        - value가 null이고 버튼이 활성화된 경우에 표시된다.
        - value가 null이고 버튼이 비활성화되고 disabledHint가 null인 경우에 표시된다.
    - Widget? disabledHint
        - placeholder 유형 위젯
        - value가 null이고 버튼이 비활성화된 경우에 표시된다.
    - Function(Object?)? onChanged
        - 항목을 선택한 경우에 동작할 기능
        - null 경우 해당 드롭다운 버튼은 비활성화 된다.
        - 필수
    - void Function()? onTap
        - 드롭다운 버튼을 선택한 경우에 동작할 기능
        - 드롭다운 버튼이 비활성화된 경우에는 호출되지 않는다.
    - int elevation
        - 드롭다운 버튼 선택 시 나올 항목 목록을 배치할 z 좌표
        - 기본 값 : 8
    - TextStyle? style
        - 드롭다운 버튼 및 드롭다운의 텍스트에 사용할 스타일
    - Widget? icon
        - 드롭다운 버튼 아이콘에 사용할 위젯
    - Color? iconDisabledColor
        - 버튼이 비활성화 된 경우의 icon 색상
    - Color? iconEnabledColor
        - 버튼이 활성화 된 경우의 icon 색상
    - double iconSize
        - icon의 크기
        - 기본 값 : 24.0
    - bool isDense
        - 드롭다운 버튼의 높이를 내부 위젯에 맞추는 것에 대한 여부
        - 기본적으로 드롭다운 버튼의 높이는 항목의 높이와 같다.
        - 기본 값 : true
    - bool isExpanded
        - 드롭다운 버튼의 내부 컨텐츠가 상위 항목을 가로로 채우도록 설정한다.
        - 기본적으로 드롭다운 버튼의 내부 너비는 해당 컨텐츠의 최소 크기이다.
        - Row에서 사용되는 Expanded 위젯의 역할과 동일하다.
        - 기본 값 : false
    - double? itemHeight
        - 각 메뉴 항목의 높이
    - Color? focusColor
        - 항목이 선택된 경우의 드롭다운 버튼의 배경 색상
    - FocusNode? focusNode
        - 해당 드롭다운 버튼에 대해 사용될 포커스 노드
    - bool autofocus
        - 자동 포커스 여부
        - 기본 값 : false
    - Color? dropdownColor
        - 드롭다운 버튼의 배경색
    - InputDecoration? decoration
        - 드롭다운 버튼에 대한 스타일
    - void Function(Object?)? onSaved
        - FormState나 Form을 통해서 저장됬을 때 동작할 기능
    - String? Function(String?)? validator
        - 유효성 검증을 진행하는 방법
        - 유효성에 문제가 있는 경우에는 해당 상황에 대한 오류 메시지를 반환한다.
    - AutovalidateMode? autovalidateMode
        - 종류
            - AutovalidateMode.onUserInteraction
                - 컨텐츠가 변경된 후에만 자동 유효성 검사가 수행된다.
            - AutovalidateMode.always
                - 사용자 상호 작용 없이도 자동 유효성 검사가 수행된다.
            - AutovalidateMode.disabled
                - 자동 유효성 검사가 비활성화된다.
    - double? menuMaxHeight
        - 메뉴의 최대 높이
        - 해당 값 설정 시 랜더링된 실제 메뉴 목록의 높이가 지정 값 보다 크다면  
        설정한 값만큼의 범위 안에서 스크롤하게 한다.
    - bool? enableFeedback
        - 감지된 제스처에 대한 음향/촉각 피드백
    - AlignmentGeometry alignment
        - 힌트 또는 선택한 항목이 버튼 내에 배치되는 방식
        - 기본 값 : AlignmentDirectional.centerStart
    - BorderRadius? borderRadius
        - border의 둥근 정도
    - EdgeInsetsGeometry? padding
        - 주변 여백

### Radio

- 상호 배타적인 여러 값 중에서 하나의 선택할 때 주로 사용된다.
- 주로 사용하는 속성
    - dynamic value
        - 해당 라디오 버튼을 선택하는 경우에 대한 값
        - 필수
    - dynamic groupValue
        - 라디오 버튼 그룹에 대해서 현재 선택된 값
        - groupValue의 값이 value의 값과 일치하면 선택된 것으로 간주한다.
        - 필수
    - void Function(dynamic)? onChanged
        - 라디오 버튼 선택 시 동작할 기능
        - 필수
    - bool toggleable
        - 토글 가능 여부
        - 기본 값 : false
    - Color? activeColor
        - 라디오 버튼이 선택된 경우의 색상
        - 외곽선과 내부의 원 도형의 색상이 바뀐다.
    - Color? focusColor
        - 버튼에 입력 포커스가 있는 경우의 배경색
    - Color? hoverColor
        - 버튼 위에 포인터가 있는 경우의 배경색
    - double? splashRadius
        - 스플래시 범위
    - FocusNode? focusNode
        - 해당 드롭다운 버튼에 대해 사용될 포커스 노드
    - bool autofocus
        - 자동 포커스 여부
        - 기본 값 : false
- [참고](https://api.flutter.dev/flutter/material/Radio-class.html)

{% highlight dart %}
List<String> list = <String>["RED", "ORANGE", "YELLOW", "GREEN", "BLUE", "INDIGO", "VIOLET"];

String? _groupValue = list.first;

Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: <Widget>[
        for(String item in list)
        ListTile(
            title: Text(item),
            leading: Radio<String>(
                value: item,
                groupValue: _groupValue,
                onChanged: (String? value) {
                    setState(() {
                        _groupValue = value;
                    });
                },
            ),
        )
    ],
)
{% endhighlight %}

### Checkbox

- 체크박스를 만드는 위젯
- 주로 사용하는 속성
    - bool? value
        - 해당 체크박스의 값
        - true일 때 활성화된다.
        - 필수
    - bool tristate
        - true일 경우 해당 체크박스에 대시 아이콘 표시된다. => 좀 더 확인 https://api.flutter.dev/flutter/material/Checkbox/tristate.html
        - 기본 값 : false
    - Function(bool?)? onChanged
        - value의 값이 변경되었을 때 동작할 기능
        - 필수
    - Color? activeColor
        - 체크박스가 선택된 경우의 체크 아이콘의 색상
    - Color? checkColor
        - 체크박스가 선택된 경우의 내부 배경색
    - Color? focusColor
        - 체크박스에 입력 포커스가 있는 경우의 배경색
    - Color? hoverColor
        - 체크박스 위에 포인터가 있는 경우의 배경색
    - double? splashRadius
        - 스플래시 범위
    - FocusNode? focusNode
        - 해당 체크박스에 대해 사용될 포커스 노드
    - bool autofocus
        - 자동 포커스 여부
        - 기본 값 : false
    - OutlinedBorder? shape
        - 체크박스의 모양
    - BorderSide? side
        - 외곽선에 대한 스타일 지정
    - bool isError
        - true일 경우 해당 체크박스가 오류 상태임을 나타낸다.
        - 기본 값 : false
- [참고](https://api.flutter.dev/flutter/material/Checkbox-class.html)

{% highlight dart %}
bool isChecked = false;

Checkbox(
    checkColor: Colors.white,
    value: isChecked,
    onChanged: (bool? value) {
        setState(() {
            isChecked = value!;
        });
    },
    shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(50)
    ),
)
{% endhighlight %}

### Switch

- [참고](https://api.flutter.dev/flutter/material/Switch-class.html)

{% highlight dart %}
{% endhighlight %}

### DropdownButton

- 사용자가 여러 항목 중에서 선택할 수 있게 하는 유형의 버튼
- 속성 목록
    - List&lt;DropdownMenuItem<dynamic>>? items
        - 사용자가 선택할 수 있는 항목 목록
        - null 경우 해당 드롭다운 버튼은 비활성화 된다.
        - 필수
    - Function(BuildContext)? selectedItemBuilder
        - 항목 목록을 생성하는 빌더 메소드
    - dynamic value
        - 현재 선택된 값
        - value가 null이고 버튼이 활성화된 경우는 hint가 표시된다.
        - value가 null이고 버튼이 비활성화된 경우는 disabledHint가 표시된다.
    - Widget? hint
        - placeholder 유형 위젯
        - value가 null이고 버튼이 활성화된 경우에 표시된다.
        - value가 null이고 버튼이 비활성화되고 disabledHint가 null인 경우에 표시된다.
    - Widget? disabledHint
        - placeholder 유형 위젯
        - value가 null이고 버튼이 비활성화된 경우에 표시된다.
    - Function(dynamic)? onChanged
        - 항목을 선택한 경우에 동작할 기능
        - null 경우 해당 드롭다운 버튼은 비활성화 된다.
        - 필수
    - Function()? onTap
        - 드롭다운 버튼을 선택한 경우에 동작할 기능
        - 드롭다운 버튼이 비활성화된 경우에는 호출되지 않는다.
    - int elevation
        - 드롭다운 버튼 선택 시 나올 항목 목록을 배치할 z 좌표
        - 기본 값 : 8
    - TextStyle? style
        - 드롭다운 버튼 및 드롭다운의 텍스트에 사용할 스타일
    - Widget? underline
        - 드롭다운 버튼의 밑줄을 그리는 데 사용할 위젯
    - Widget? icon
        - 드롭다운 버튼 아이콘에 사용할 위젯
    - Color? iconDisabledColor
        - 버튼이 비활성화 된 경우의 icon 색상
    - Color? iconEnabledColor
        - 버튼이 활성화 된 경우의 icon 색상
    - double iconSize
        - icon의 크기
        - 기본 값 : 24.0
    - bool isDense
        - 드롭다운 버튼의 높이를 내부 위젯에 맞추는 것에 대한 여부
        - 기본적으로 드롭다운 버튼의 높이는 항목의 높이와 같다.
        - 기본 값 : false
    - bool isExpanded
        - 드롭다운 버튼의 내부 컨텐츠가 상위 항목을 가로로 채우도록 설정한다.
        - 기본적으로 드롭다운 버튼의 내부 너비는 해당 컨텐츠의 최소 크기이다.
        - Row에서 사용되는 Expanded 위젯의 역할과 동일하다.
        - 기본 값 : false
    - double? itemHeight
        - 각 메뉴 항목의 높이
        - 기본 값 : kMinInteractiveDimension
    - Color? focusColor
        - 항목이 선택된 경우의 드롭다운 버튼의 배경 색상
    - FocusNode? focusNode
        - 해당 드롭다운 버튼에 대해 사용될 포커스 노드
    - bool autofocus
        - 자동 포커스 여부
        - 기본 값 : false
    - Color? dropdownColor
        - 드롭다운 버튼의 배경색
    - double? menuMaxHeight
        - 메뉴의 최대 높이
        - 해당 값 설정 시 랜더링된 실제 메뉴 목록의 높이가 지정 값 보다 크다면  
        설정한 값만큼의 범위 안에서 스크롤하게 한다.
    - bool? enableFeedback
        - 감지된 제스처에 대한 음향/촉각 피드백
    - AlignmentGeometry alignment
        - 힌트 또는 선택한 항목이 버튼 내에 배치되는 방식
        - 기본 값 : AlignmentDirectional.centerStart
    - BorderRadius? borderRadius
        - border의 둥근 정도
    - EdgeInsetsGeometry? padding
        - 주변 여백
- [참고](https://api.flutter.dev/flutter/material/DropdownButton-class.html)

{% highlight dart %}
List<String> list = <String>['One', 'Two', 'Three', 'Four'];

String dropdownValue = list.first;

DropdownButton<String>(
    value: dropdownValue,
    icon: const Icon(Icons.arrow_downward),
    elevation: 16,
    style: const TextStyle(color: Colors.deepPurple),
    underline: Container(
        height: 2,
        color: Colors.deepPurpleAccent,
    ),
    onChanged: (String? value) {
        setState(() {
            dropdownValue = value!;
        });
    },
    items: list.map<DropdownMenuItem<String>>((String value) {
        return DropdownMenuItem<String>(
            value: value,
            child: Text(value),
        );
    }).toList(),
)
{% endhighlight %}

### DropdownMenu

- DropdownButton Material 3 버전

- [참고](https://api.flutter.dev/flutter/material/DropdownMenu-class.html)

- TextField 에서 열 수 있는 드롭다운 메뉴
- 선택한 메뉴 항목이 해당 필드에 표시된다.

{% highlight dart %}
{% endhighlight %}

### Slider

- [참고](https://api.flutter.dev/flutter/material/Slider-class.html)

{% highlight dart %}
{% endhighlight %}

### DatePicker

- [참고]()

{% highlight dart %}
{% endhighlight %}

### TimePicker

- [참고]()

{% highlight dart %}
{% endhighlight %}

### Autocomplete

- [참고](https://api.flutter.dev/flutter/material/Autocomplete-class.html)

{% highlight dart %}
{% endhighlight %}