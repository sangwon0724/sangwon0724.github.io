### Kafka에 대하여
- 개념
- 사용 이유유
- 특징
- 장/단점
- 기존 메시지 시스템과의 차이점

### Kafka 핵심 구성요소
- 클러스터
- 브로커
- 토픽
- 파티션
- 프로듀서
- 컨슈머

### Kafka 설치 및 기본 설정
- 로컬 환경과 도커를 이용한 Kafka 설치 방법
- Zookeeper와 Kafka의 관계
- 주요 설정 옵션
- 기본적인 클러스터 구성 방법

### 토픽과 파티션 설계
- 토픽
- 파티션
- 효율적인 메시지 처리를 위한 설계 방법
- 파티션 수 결정, 복제 팩터 설정 등 실무적인 고려사항

### 프로듀서 API 활용
- Java를 이용한 Kafka 프로듀서 구현 방법과 주요 설정 옵션
- 메시지 키 설정, 파티셔닝 전략, 전송 보장 수준 등 메시지 생산에 관한 중요 개념

### 컨슈머 API 및 컨슈머 그룹
- Kafka 컨슈머 구현 방법과 컨슈머 그룹의 개념
- 오프셋 관리
- 리밸런싱 메커니즘
- 메시지 처리 보장 방식
- 메시지 소비에 관한 중요 개념

### 데이터 복제와 컨트롤러
- Kafka의 고가용성을 위한 데이터 복제 메커니즘
- 리더와 팔로워의 역할
- ISR(In-Sync Replicas)
- 컨트롤러 브로커의 기능
- Kafka의 내부 동작 원리

### Kafka Connect 프레임워크
- 외부 시스템과 Kafka를 연결하는 Kafka Connect의 아키텍처와 사용법
- Source Connector와 Sink Connector의 개념과 구현 방법, 주요 커넥터 플러그인 활용법

### Kafka Streams API
- Kafka 메시지를 처리하기 위한 스트림 처리 라이브러리인 Kafka Streams의 기본 개념과 프로그래밍 모델
- 상태 기반 처리
- 윈도우 연산
- 조인 연산
- 스트림 처리의 핵심 기능