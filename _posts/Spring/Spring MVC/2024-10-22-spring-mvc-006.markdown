---
layout: post
title:  "[스프링 MVC 1편] 스프링 MVC - 기본 기능"
date:   2024-10-22 16:33:00 +0900
categories: Spring&nbsp;MVC
tags: []
---

### 프로젝트 생성

- 본격적으로 서블릿을 이해하기 위해 프로젝트를 생성해보자.
- [스프링 이니셜라이저](https://start.spring.io/)를 통해 프로젝트를 생성하자.
    - 프로젝트 선택
    -   Project: Gradle - Groovy Project
    -   Language: Java
    -   Spring Boot: 3.x.x
    - Project Metadata
        - Group: hello
        - Artifact: springmvc
        - Name: springmvc
        - Package name: hello.springmvc
        - Packaging: Jar (주의!)
        - Java: 17 또는 21
    - Dependencies
        - Spring Web
        - Thymeleaf
        - Lombok

#### Welcome 페이지 만들기

- 스프링 부트에서 Jar를 사용하면 `/resources/static/` 위치에 index.html 파일을 두면 Welcome 페이지로 처리해준다.

{% highlight html %}
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>
    <body>
        <ul>
            <li>로그 출력
                <ul>
                    <li><a href="/log-test">로그 테스트</a></li>
                </ul>
            </li>
            <li>요청 매핑
                <ul>
                    <li><a href="/hello-basic">hello-basic</a></li>
                    <li><a href="/mapping-get-v1">HTTP 메서드 매핑</a></li>
                    <li><a href="/mapping-get-v2">HTTP 메서드 매핑 축약</a></li>
                    <li><a href="/mapping/userA">경로 변수</a></li>
                    <li><a href="/mapping/users/userA/orders/100">경로 변수 다중</a></li>
                    <li><a href="/mapping-param?mode=debug">특정 파라미터 조건 매핑</a></li>
                    <li><a href="/mapping-header">특정 헤더 조건 매핑(POST MAN 필요)</a></li>
                    <li><a href="/mapping-consume">미디어 타입 조건 매핑 Content-Type(POST MAN 필요)</a></li>
                    <li><a href="/mapping-produce">미디어 타입 조건 매핑 Accept(POST MAN 필요)</a></li>
                </ul>
            </li>
            <li>요청 매핑 - API 예시
                <ul>
                    <li>POST MAN 필요</li>
                </ul>
            </li>
            <li>HTTP 요청 기본
                <ul>
                    <li><a href="/headers">기본, 헤더 조회</a></li>
                </ul>
            </li>
            <li>HTTP 요청 파라미터
                <ul>
                    <li><a href="/request-param-v1?username=hello&age=20">요청 파라미터 v1</a></li>
                    <li><a href="/request-param-v2?username=hello&age=20">요청 파라미터 v2</a></li>
                    <li><a href="/request-param-v3?username=hello&age=20">요청 파라미터 v3</a></li>
                    <li><a href="/request-param-v4?username=hello&age=20">요청 파라미터 v4</a></li>
                    <li><a href="/request-param-required?username=hello&age=20">요청 파라미터 필수</a></li>
                    <li><a href="/request-param-default?username=hello&age=20">요청 파라미터 기본 값</a></li>
                    <li><a href="/request-param-map?username=hello&age=20">요청 파라미터 MAP</a></li>
                    <li><a href="/model-attribute-v1?username=hello&age=20">요청 파라미터 @ModelAttribute v1</a></li>
                    <li><a href="/model-attribute-v2?username=hello&age=20">요청 파라미터 @ModelAttribute v2</a></li>
                </ul>
            </li>
            <li>HTTP 요청 메시지
                <ul>
                    <li>POST MAN</li>
                </ul>
            </li>
            <li>HTTP 응답 - 정적 리소스, 뷰 템플릿
                <ul>
                    <li><a href="/basic/hello-form.html">정적 리소스</a></li>
                    <li><a href="/response-view-v1">뷰 템플릿 v1</a></li>
                    <li><a href="/response-view-v2">뷰 템플릿 v2</a></li>
                </ul>
            </li>
            <li>HTTP 응답 - HTTP API, 메시지 바디에 직접 입력
                <ul>
                    <li><a href="/response-body-string-v1">HTTP API String v1</a></li>
                    <li><a href="/response-body-string-v2">HTTP API String v2</a></li>
                    <li><a href="/response-body-string-v3">HTTP API String v3</a></li>
                    <li><a href="/response-body-json-v1">HTTP API Json v1</a></li>
                    <li><a href="/response-body-json-v2">HTTP API Json v2</a></li>
                </ul>
            </li>
        </ul>
    </body>
</html>
{% endhighlight %}


### 로깅 간단히 알아보기

- 운영 시스템에서는 System.out.println() 같은 시스템 콘솔을 사용해서 필요한 정보를 출력하지 않는다.
    - 별도의 로깅 라이브러리를 사용해서 로그를 출력한다.
- 스프링 부트 로깅 라이브러리는 기본으로 다음 로깅 라이브러리를 사용한다.
    - SLF4J
    - LogBack
- 로그 라이브러리는 Logback, Log4J, Log4J2 등등 수 많은 라이브러리가 있다.
    - 그것을 통합해서 인터페이스로 제공하는 것이 바로 SLF4J 라이브러리다.
- 즉, SLF4J는 인터페이스이고, 그 구현체로 Logback 같은 로그 라이브러리를 선택하면 된다.
- 실무에서는 스프링 부트가 기본으로 제공하는 Logback을 대부분 사용한다.

#### 로그 선언 방법

- `private Logger log = LoggerFactory.getLogger(getClass());`
- `private static final Logger log = LoggerFactory.getLogger(Xxx.class)`
- `@Slf4j`
    - 롬복을 사용하는 경우에만 적용 가능

#### 로그 호출 방법

- `log.info("hello")`

#### 로그 정보

- 로그가 알려주는 정보
    - 시간
    - 로그 레벨
    - 프로세스 ID
    - 쓰레드 명
    - 클래스명
    - 로그 메시지
- 로그 레벨
    - TRACE > DEBUG > INFO > WARN > ERROR
    - 개발 서버는 보통 DEBUG로 출력한다.
    - 운영 서버는 보통 INFO로 출력한다.
    - 출력하기 위해 설정한 로그 레벨과 그 다음 레벨만 출력한다.
        - 그 이전 레벨은 출력되지 않는다.

#### 로그 레벨 설정하기

- application.properties에서 수정한 로그 레벨에 따라 출력되는 로그가 달라진다.
- 중요한 부분은 `logging.level`다.
    - `logging.level` 작성 후 그 뒤에 명시한 패키지별로 로그 레벨을 수정할 수 있다.

{% highlight properties %}
#전체 로그 레벨 설정(기본 info)
logging.level.root=info

#hello.springmvc 패키지와 그 하위 로그 레벨 설정
logging.level.hello.springmvc=debug
{% endhighlight %}

#### 올바른 로그 사용법

- `log.debug("data="+data)`
    - 해당 로그는 잘못된 사용법이 적용되었다.
    - 문자열 연산으로 값을 추가하게 된다면 로그 레벨 설정으로 인해서 해당 로그를 사용하지 않더라도 문자열 연산이 발생하게 된다.
    - 즉, 해당 로그는 로그 레벨을 INFO로 설정하면 출력되지 않아도 연산 자체는 발생한다.
- `log.debug("data={}", data)`
    - 해당 로그는 로그 레벨을 INFO로 설정하면 출력되지 않는다.

#### 로그 사용시 장점

- 쓰레드 정보, 클래스 이름 같은 부가 정보를 함께 볼 수 있고, 출력 모양을 조정할 수 있다.
- 로그 레벨에 따라 로그를 상황에 맞게 조절할 수 있다.
    - 개발 서버에서는 모든 로그를 출력
    - 운영서버에서는 일부 로그만 출력 
- 시스템 아웃 콘솔에만 출력하는 것이 아니라, 파일이나 네트워크 등, 로그를 별도의 위치에 남길 수 있다.
    - 특히 파일로 남길 때는 일별, 특정 용량에 따라 로그를 분할하는 것도 가능하다.
- 일반 System.out보다 성능이 좋다.
    - 내부 버퍼링, 멀티 쓰레드 등등

#### 로그 경험해보기

- 아래 코드를 추가 후 서버를 실행해서 테스트해보자.
    - `http://localhost:8080/log-test`
- 로그는 애플리케이션에서 설정한 로그 레벨에 따라 출력되는 범위가 다르다.
- 로그에서 값을 출력시키고 싶다면 `{}`를 사용해야 한다.

{% highlight java %}
package hello.springmvc.basic;

import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

//@Slf4j
@RestController
public class LogTestController {
    private final Logger log = LoggerFactory.getLogger(getClass());

    @RequestMapping("/log-test")
    public String logTest() {
        String name = "Spring";

        log.trace("trace log={}", name);
        log.debug("debug log={}", name);
        log.info(" info log={}", name);
        log.warn(" warn log={}", name);
        log.error("error log={}", name);

        //로그 레벨 수정으로 인해 해당 로그가 출력되지 않아도 a+b 계산 로직이 실행된다.
        log.debug("String concat log=" + name);
        return "ok";
    }
}
{% endhighlight %}

### 요청 매핑

- `@RestController`
    - @Controller는 반환 값이 String 이면 뷰 이름으로 인식된다.
        - 그래서 뷰를 찾고 뷰가 랜더링 된다.
    - @RestController는 반환 값으로 뷰를 찾는 것이 아니라, HTTP 메시지 바디에 바로 입력한다.
        - 따라서 실행 결과로 ok 메세지를 받을 수 있다.
        - @ResponseBody와 관련이 있다.
- `@RequestMapping("/hello-basic")`
    - `/hello-basic` URL 호출이 오면 이 메서드가 실행되도록 매핑한다.
    - 대부분의 속성을 배열[] 로 제공하므로 다중 설정이 가능하다.
        - `{"/hello-basic", "/hello-go"}`
- 스프링 부트 3.0 이전과 이후의 URL 허용 차이
    - 매핑
        - `/hello-basic`
    - 3.0 이전 URL 요청
        - `/hello-basic` => 가능
        - `/hello-basic/` => 가능
    - 3.0 이후 URL 요청
        - `/hello-basic` => 가능
        - `/hello-basic/` => 불가능

{% highlight java %}
package hello.springmvc.basic.requestmapping;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.*;

@RestController
public class MappingController {
    private Logger log = LoggerFactory.getLogger(getClass());
    
    /**
     * 기본 요청
     * 둘다 허용 /hello-basic, /hello-basic/
     * HTTP 메서드 모두 허용 GET, HEAD, POST, PUT, PATCH, DELETE
     */
    @RequestMapping("/hello-basic")
    public String helloBasic() {
        log.info("helloBasic");
        return "ok";
    }
}
{% endhighlight %}

#### HTTP 메서드 매핑

- `@RequestMapping`을 사용할 때 HTTP 메서드를 지정한다.
    - 특정 HTTP 메서드 요청만 허용한다.
- GET, HEAD, POST, PUT, PATCH, DELETE
- 다중 허용을 하고 싶다면 `{}`로 묶으면 된다.
    - `method = {RequestMethod.GET, RequestMethod.POST}`

{% highlight java %}
/**
    * method 특정 HTTP 메서드 요청만 허용
    * GET, HEAD, POST, PUT, PATCH, DELETE
*/
@RequestMapping(value = "/mapping-get-v1", method = RequestMethod.GET)
public String mappingGetV1() {
    log.info("mappingGetV1");
    return "ok";
}
{% endhighlight %}

#### HTTP 메서드 매핑 축약

- `@RequestMapping`과 `RequestMethod`를 각각 명시하지 않고 축약해서 사용할 수 있다.
- `@GetMapping`, `@PostMapping`, `@PutMapping`, `@DeleteMapping`, `@PatchMapping`
- HTTP 메서드를 축약한 애노테이션을 사용하는 것이 더 직관적이다.
    - 사실 애노테이션 내부를 확인해보면 `@RequestMapping`과 `RequestMethod`의 조합으로 이루어져 있다.

{% highlight java %}
/**
    * 편리한 축약 애노테이션 (코드보기)
    * @GetMapping
    * @PostMapping
    * @PutMapping
    * @DeleteMapping
    * @PatchMapping
*/
@GetMapping(value = "/mapping-get-v2")
public String mappingGetV2() {
    log.info("mapping-get-v2");
    return "ok";
}
{% endhighlight %}

#### PathVariable(경로 변수) 사용

- @PathVariable("변수명")을 사용해서 URL에 있는 값을 꺼내서 쓸 수 있다.
    - 변수명이 같으면 생략할 수 있다.
- 최근 HTTP API는 다음과 같이 리소스 경로에 식별자를 넣는 스타일을 선호한다.
    - `/mapping/userA`
    - `/users/1`

{% highlight java %}
/**
    * PathVariable 사용
    * 변수명이 같으면 생략 가능
    * @PathVariable("userId") String userId -> @PathVariable String userId
*/
@GetMapping("/mapping/{userId}")
public String mappingPath(@PathVariable("userId") String data) {
    log.info("mappingPath userId={}", data);
    return "ok";
}
{% endhighlight %}

#### PathVariable 사용 - 다중

- @PathVariable은 하나의 URL에서 여러 번 사용할 수 있다.

{% highlight java %}
/**
    * PathVariable 사용 다중
*/
@GetMapping("/mapping/users/{userId}/orders/{orderId}")
public String mappingPath(@PathVariable String userId, @PathVariable Long orderId) {
    log.info("mappingPath userId={}, orderId={}", userId, orderId);
    return "ok";
}
{% endhighlight %}

#### 특정 파라미터 조건 매핑

- URL에 넘어온 파라미터의 값에 조건을 걸 수도 있다.
- 잘 사용하지는 않는다.

{% highlight java %}
/**
    * 파라미터로 추가 매핑
    * params="mode" => mode가 존재하는 경우
    * params="!mode" => mode가 존재하지 않는 경우
    * params="mode=debug" => mode의 값이 debug인 경우
    * params="mode!=debug" => mode의 값이 debug가 아닌 경우
    * params = {"mode=debug","data=good"} => mode의 값은 debug이고, data의 값은 good인 경우
*/
@GetMapping(value = "/mapping-param", params = "mode=debug")
public String mappingParam() {
    log.info("mappingParam");
    return "ok";
}
{% endhighlight %}

#### 특정 헤더 조건 매핑

- 파라미터 매핑과 비슷하지만, HTTP 헤더를 사용한다.
- 테스트를 하려면 포스트맨같은 도구를 이용해야 한다.

{% highlight java %}
/**
    * 특정 헤더로 추가 매핑
    * headers="mode" => mode가 존재하는 경우
    * headers="!mode" => mode가 존재하지 않는 경우
    * headers="mode=debug" => mode의 값이 debug인 경우
    * headers="mode!=debug" => mode의 값이 debug가 아닌 경우
*/
@GetMapping(value = "/mapping-header", headers = "mode=debug")
public String mappingHeader() {
    log.info("mappingHeader");
    return "ok";
}
{% endhighlight %}

#### 미디어 타입 조건 매핑 (Content-Type, consume)

- consumes를 통해 HTTP 요청의 Content-Type 헤더를 기반으로 미디어 타입으로 매핑한다.
    - 만약 맞지 않으면 HTTP 415 상태코드(Unsupported Media Type)을 반환한다.
- `{}`를 통해서 여러 항목을 명시할 수도 있다.
- 테스트를 하려면 포스트맨같은 도구를 이용해야 한다.

{% highlight java %}
/**
    * Content-Type 헤더 기반 추가 매핑 Media Type
    * consumes="application/json"
    * consumes="!application/json"
    * consumes="application/*"
    * consumes="*\/*"
    * MediaType.APPLICATION_JSON_VALUE
*/
@PostMapping(value = "/mapping-consume", consumes = "application/json")
public String mappingConsumes() {
    log.info("mappingConsumes");
    return "ok";
}
{% endhighlight %}

#### 미디어 타입 조건 매핑 (Accept, produce)

- HTTP 요청의 Accept 헤더를 기반으로 미디어 타입으로 매핑한다.
    - 만약 맞지 않으면 HTTP 406 상태코드(Not Acceptable)을 반환한다.
- `{}`를 통해서 여러 항목을 명시할 수도 있다.
- 테스트를 하려면 포스트맨같은 도구를 이용해야 한다.

{% highlight java %}
/**
    * Accept 헤더 기반 Media Type
    * produces = "text/html"
    * produces = "!text/html"
    * produces = "text/*"
    * produces = "*\/*"
*/
@PostMapping(value = "/mapping-produce", produces = "text/html")
public String mappingProduces() {
    log.info("mappingProduces");
    return "ok";
}
{% endhighlight %}

### 요청 매핑 - API 예시

- 회원 관리를 HTTP API로 만든다는 가정하에 매핑을 어떻게 할지 알아보자.
- 회원 관리 API
    - 회원 목록 조회
        - ` GET /users`
    - 회원 등록
        - `POST /users`
    - 회원 조회
        - `GET /users/{userId}`
    - 회원 수정
        - `PATCH /users/{userId}`
    - 회원 삭제
        - `DELETE /users/{userId}`

{% highlight java %}
package hello.springmvc.basic.requestmapping;
import org.springframework.web.bind.annotation.*;
@RestController
@RequestMapping("/mapping/users")
public class MappingClassController {
    /**
     * GET /mapping/users
     */
    @GetMapping
    public String users() {
        return "get users";
    }

    /**
     * POST /mapping/users
     */
    @PostMapping
    public String addUser() {
        return "post user";
    }

    /**
     * GET /mapping/users/{userId}
     */
    @GetMapping("/{userId}")
    public String findUser(@PathVariable String userId) {
        return "get userId=" + userId;
    }

    /**
     * PATCH /mapping/users/{userId}
     */
    @PatchMapping("/{userId}")
    public String updateUser(@PathVariable String userId) {
        return "update userId=" + userId;
    }
    
    /**
     * DELETE /mapping/users/{userId}
     */
    @DeleteMapping("/{userId}")
    public String deleteUser(@PathVariable String userId) {
        return "delete userId=" + userId;
    }
}
{% endhighlight %}

### HTTP 요청 - 기본, 헤더 조회

- 애노테이션 기반의 스프링 컨트롤러는 다양한 파라미터를 지원한다.
- HTTP 헤더 정보를 조회하는 방법을 알아보자.
- HTTP 헤더 정보
    - HttpServletRequest
        - HTTP 요청 정보
    - HttpServletResponse
        - HTTP 응답 정보
    - HttpMethod
        - HTTP 메서드
        - org.springframework.http.HttpMethod
    - Locale
        - Locale 정보
    - @RequestHeader MultiValueMap&lt;String, String> headerMap
        - 모든 HTTP 헤더를 MultiValueMap 형식으로 조회한다.
    - @RequestHeader("host") String host
        - 특정 HTTP 헤더를 조회한다.
        - 속성
            - 필수 값 여부 => required
            - 기본 값 속성 => defaultValue
    - @CookieValue(value = "myCookie", required = false) String cookie
        - 특정 쿠키를 조회한다.
        - 속성
            - 필수 값 여부 => required
            - 기본 값 => defaultValue

{% highlight java %}
package hello.springmvc.basic.request;

import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpMethod;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.util.Locale;

@Slf4j
@RestController
public class RequestHeaderController {
    @RequestMapping("/headers")
    public String headers(
        HttpServletRequest request,
        HttpServletResponse response,
        HttpMethod httpMethod,
        Locale locale,
        @RequestHeader MultiValueMap<String, String> headerMap,
        @RequestHeader("host") String host,
        @CookieValue(value = "myCookie", required = false) String cookie
    ) {
        log.info("request={}", request);
        log.info("response={}", response);
        log.info("httpMethod={}", httpMethod);
        log.info("locale={}", locale);
        log.info("headerMap={}", headerMap);
        log.info("header host={}", host);
        log.info("myCookie={}", cookie);
        return "ok";
    }
}
{% endhighlight %}

### HTTP 요청 파라미터 - 쿼리 파라미터, HTML Form

- 클라이언트에서 서버로 요청 데이터를 전달할 때는 주로 다음 3가지 방법을 사용한다.
    - GET - 쿼리 파라미터
        - /url**?username=hello&age=20**
        - 메시지 바디 없이, URL의 쿼리 파라미터에 데이터를 포함해서 전달
        - 예시
            - 검색
            - 필터
            - 페이징
    - POST - HTML Form
        - content-type: application/x-www-form-urlencoded
        - 메시지 바디에 쿼리 파리미터 형식으로 전달 username=hello&age=20
        - 예시
            - 회원 가입
            - 상품 주문
            - HTML Form 사용
    - HTTP message body에 데이터를 직접 담아서 요청
        - HTTP API에서 주로 사용, JSON, XML, TEXT
        - 데이터 형식은 주로 JSON 사용
        - POST, PUT, PATCH


- GET 쿼리 파리미터 전송 방식이든, POST HTML Form 전송 방식이든 둘다 형식이 같으므로 구분없이 조회할 수 있다.
    - 예시
        - `username=hello&age=20`
    - 이것을 간단히 <b>요청 파라미터(request parameter) 조회</b>라 한다.

{% highlight java %}
package hello.springmvc.basic.request;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

@Slf4j
@Controller
public class RequestParamController {
    /**
     * 반환 타입이 없으면서 이렇게 응답에 값을 직접 집어넣으면, view 조회X
     */
    @RequestMapping("/request-param-v1")
    public void requestParamV1(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String username = request.getParameter("username");
        int age = Integer.parseInt(request.getParameter("age"));
        log.info("username={}, age={}", username, age);
        
        response.getWriter().write("ok");
    }
}
{% endhighlight %}

- 테스트를 위한 HTML Form도 미리 만들어두자.
    - 리소스는 /resources/static 아래에 두면 스프링 부트가 자동으로 인식한다.
    - `src/main/resources/static/basic/hello-form.html`
    - 서버를 실행하고 아래 주소로 접속해보자.
        - `http://localhost:8080/basic/hello-form.html`
{% highlight html %}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<form action="/request-param-v1" method="post">
    username: <input type="text" name="username" />
    age: <input type="text" name="age" />
    <button type="submit">전송</button>
</form>
</body>
</html>
{% endhighlight %}

### HTTP 요청 파라미터 - @RequestParam

- 스프링이 제공하는 `@RequestParam`을 사용하면 요청 파라미터를 매우 편리하게 사용할 수 있다.

- `@RequestParam`
    - 파라미터 이름으로 바인딩한다.
- `@ResponseBody`
    - View 조회를 무시하고, HTTP message body에 직접 해당 내용 입력한다.
- `@RequestParam`의 name(value) 속성이 파라미터 이름으로 사용된다.
    - `@RequestParam("username") String memberName` → `request.getParameter("username")`

{% highlight java %}
/**
    * @RequestParam 사용
    * - 파라미터 이름으로 바인딩
    * @ResponseBody 추가
    * - View 조회를 무시하고, HTTP message body에 직접 해당 내용 입력
*/
@ResponseBody
@RequestMapping("/request-param-v2")
public String requestParamV2(@RequestParam("username") String memberName, @RequestParam("age") int memberAge) {
    log.info("username={}, age={}", memberName, memberAge);
    return "ok";
}
{% endhighlight %}


#### 파리미터명 생략

- HTTP 파라미터 이름이 변수 이름과 같으면 @RequestParam(name="xx")에서 `(name="xx")` 부분을 생략해도 된다.

{% highlight java %}
/**
    * @RequestParam 사용
    * HTTP 파라미터 이름이 변수 이름과 같으면 @RequestParam(name="xx") 생략 가능
*/
@ResponseBody
@RequestMapping("/request-param-v3")
public String requestParamV3(@RequestParam String username, @RequestParam int age) {
    log.info("username={}, age={}", username, age);
    return "ok";
}
{% endhighlight %}

#### 애노테이션 생략

- String, int, Integer 등의 단순 타입이면 @RequestParam 조차도 생략해도 된다.
    - 하지만 @RequestParam 애노테이션을 생략하면 스프링 MVC는 내부에서 required=false를 적용하니 이 부분은 주의해서 사용해야 한다.
    - 애노테이션을 완전히 생략해도 되긴 하지만, 명확하게 데이터를 읽는 것을 나타내기 위해 @RequestParam 정도는 명시하는 것이 좋다.
{% highlight java %}
/**
    * @RequestParam 사용
    * String, int 등의 단순 타입이면 @RequestParam 도 생략 가능
*/
@ResponseBody
@RequestMapping("/request-param-v4")
public String requestParamV4(String username, int age) {
    log.info("username={}, age={}", username, age);
    return "ok";
}
{% endhighlight %}

#### 파라미터 필수 여부

- @RequestParam.required
    - 파라미터 필수 여부
    - 기본값이 true다.
- 만약 값이 true인데 해당 파라미터가 아예 없다면 400 예외가 발생한다.
- 자료형이 String인데 빈 문자열일 경우에는 빈 문자로 통과되버린다.
    - 주의가 필요한 사항
    - 값이 비어있으면 안 되는 경우에는 유효성 검사를 실시해야 한다.
- 만약 값이 false인데 자료형이 int나 double같은 원시 자료형일 경우에는 값이 null로 들어가게 된다.
    - 하지만 원시 자료형은 null을 저장할 수 없으므로 해당 자료형을 Integer나 Double로 변경해야 한다.
    - 원시 자료형 그대로 쓰게 되면 500 예외가 발생한다.
    - 또는 defaultValue 속성을 통해 기본 값을 지정해주면 된다.

{% highlight java %}
/**
    * /request-param-required -> username이 없으므로 예외 발생
    * (주의) /request-param-required?username= -> 빈문자로 통과
    * (주의) /request-param-required
    * int age -> null을 int에 입력하는 것은 불가능하기 때문에 Integer 변경해야 하거나 defaultValue를 사용해야 한다.
*/
@ResponseBody
@RequestMapping("/request-param-required")
public String requestParamRequired(@RequestParam(required = true) String username, @RequestParam(required = false) Integer age) {
    log.info("username={}, age={}", username, age);
    return "ok";
}
{% endhighlight %}

#### 기본 값 적용

- 파라미터에 값이 없는 경우 defaultValue를 사용하면 기본 값을 적용할 수 있다.
    - 이미 기본 값이 있기 때문에 required의 의미가 없어진다.
- defaultValue는 빈 문자의 경우에도 설정한 기본 값이 적용된다.

{% highlight java %}
/**
    * 참고: defaultValue는 빈 문자의 경우에도 적용
    * /request-param-default?username=
*/
@ResponseBody
@RequestMapping("/request-param-default")
public String requestParamDefault(@RequestParam(required = true, defaultValue = "guest") String username, @RequestParam(required = false, defaultValue = "-1") int age) {
    log.info("username={}, age={}", username, age);
    return "ok";
}
{% endhighlight %}

#### 파라미터를 Map으로 조회하기

- 파라미터를 Map이나 MultiValueMap으로 조회할 수 있다.
- 파라미터의 값이 1개가 확실하다면 Map을 사용해도 된다.
    - 그렇지 않다면 MultiValueMap을 사용하는 것이 좋다.

{% highlight java %}
/**
    * @RequestParam Map, MultiValueMap
    * Map(key=value)
    * MultiValueMap(key=[value1, value2, ...]) ex) (key=userIds, value=[id1, id2])
*/
@ResponseBody
@RequestMapping("/request-param-map")
public String requestParamMap(@RequestParam Map<String, Object> paramMap) {
    log.info("username={}, age={}", paramMap.get("username"), paramMap.get("age"));
    return "ok";
}
{% endhighlight %}

#### 스프링 부트 3.2의 파리머티명 인식 문제

- 스프링 부트 3.2 전까지는 바이트코드를 파싱해서 매개변수 이름을 추론하려고 시도했다.
    - 하지만 스프링 부트 3.2 부터는 이런 시도를 하지 않는다.
- 그래서 주로 다음 두 애노테이션에서 문제가 발생한다.
    - @RequestParam
    - @PathVariable
- 해결 방안
    - 해결 방안1 (권장)
        - 애노테이션에 이름을 생략하지 않고 다음과 같이 이름을 항상 적어준다.
    - 해결 방안2
        - 컴파일 시점에 `-parameters` 옵션 적용
        1. IntelliJ IDEA에서 File Settings를 연다. (Mac은 IntelliJ IDEA Settings)
        2. Build, Execution, Deployment → Compiler → Java Compiler로 이동한다.
        3. Additional command line parameters라는 항목에 `-parameters`를 추가한다.
        4. out 폴더를 삭제하고 다시 실행한다.
            - 꼭 out 폴더를 삭제해야 다시 컴파일이 일어난다.
    - 해결 방안3
        - Gradle을 사용해서 빌드하고 실행한다

### HTTP 요청 파라미터 - @ModelAttribute

- 실제 개발을 하면 요청 파라미터를 받아서 필요한 객체를 만들고 그 객체에 값을 넣어주어야 한다.

#### 테스트를 위한 객체 생성

{% highlight java %}
package hello.springmvc.basic;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class HelloData {
    private String username;
    private int age;
}
{% endhighlight %}

#### @ModelAttribute 적용

- @ModelAttribute를 명시하면 HelloData 객체가 생성되고, 요청 파라미터의 값이 모두 들어가게 된다.
- 스프링MVC는 @ModelAttribute가 있으면 아래 에시에서 다음과 같이 동작한다.
    - HelloData 객체를 생성한다.
    - 요청 파라미터의 이름으로 HelloData 객체의 프로퍼티를 찾는다.
    - 해당 프로퍼티의 setter를 호출해서 파라미터의 값을 입력(바인딩) 한다.
        - 만약에 파라미터 이름이 username이라면 해당 파라미터의 Setter를 호출해서 값을 입력한다.
- 다만 자료형이 맞지 않는 경우에는 BindException이 발생한다.
    - 예시 : 나이를 가리키는 age에 "abc"가 입력되는 경우
    - 이런 경우에는 검증을 통해서 미리 예외 처리를 해야 한다.

{% highlight java %}
/**
    * @ModelAttribute 사용
    * 참고: model.addAttribute(helloData) 코드도 함께 자동 적용된다.
*/
@ResponseBody
@RequestMapping("/model-attribute-v1")
public String modelAttributeV1(@ModelAttribute HelloData helloData) {
    log.info("username={}, age={}", helloData.getUsername(), helloData.getAge());
    return "ok";
}
{% endhighlight %}

#### @ModelAttribute 생략

- @ModelAttribute도 @RequestParam처럼 생략할 수 있다.
- 다만 생략 가능하다고 전부 다 생략해버리면 혼란이 발생할 수 있다.
- 스프링은 해당 생략시 다음과 같은 규칙을 적용한다.
    - String, int, Integer같은 단순 타입 => @RequestParam
    - 나머지 => @ModelAttribute (argument resolver 로 지정해둔 타입 외)

{% highlight java %}
/**
    * @ModelAttribute 생략 가능
    * String, int, Integer같은 단순 타입 => @RequestParam
    * argument resolver 로 지정해둔 타입 외 => @ModelAttribute
*/
@ResponseBody
@RequestMapping("/model-attribute-v2")
public String modelAttributeV2(HelloData helloData) {
    log.info("username={}, age={}", helloData.getUsername(), helloData.getAge());
    return "ok";
}
{% endhighlight %}

### HTTP 요청 메시지 - 단순 텍스트

- 데이터는 HTTP 메시지 바디를 통해서 직접 넘길 수도 있다.
    - HTTP 메시지 바디의 데이터를 InputStream을 사용해서 직접 읽을 수 있다.
- 가장 단순한 텍스트 메시지로 먼저 테스트해보자.
    - 테스트는 포스트맨으로 진행한다.

{% highlight java %}
package hello.springmvc.basic.request;

import jakarta.servlet.ServletInputStream;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.util.StreamUtils;
import org.springframework.web.bind.annotation.PostMapping;

import java.io.IOException;
import java.nio.charset.StandardCharsets;

@Slf4j
@Controller
public class RequestBodyStringController {
    @PostMapping("/request-body-string-v1")
    public void requestBodyString(HttpServletRequest request, HttpServletResponse response) throws IOException {
        ServletInputStream inputStream = request.getInputStream();
        String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
        
        log.info("messageBody={}", messageBody);
        
        response.getWriter().write("ok");
    }
}
{% endhighlight %}

#### Input, Output 스트림, Reader

- 스프링 MVC는 다음 파라미터를 지원한다.
    - InputStream(Reader)
        - HTTP 요청 메시지 바디의 내용을 직접 조회
    - OutputStream(Writer)
        - HTTP 응답 메시지의 바디에 직접 결과 출력

{% highlight java %}
/**
    * InputStream(Reader) : HTTP 요청 메시지 바디의 내용을 직접 조회
    * OutputStream(Writer) : HTTP 응답 메시지의 바디에 직접 결과 출력
*/
@PostMapping("/request-body-string-v2")
public void requestBodyStringV2(InputStream inputStream, Writer responseWriter) throws IOException {
    String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);

    log.info("messageBody={}", messageBody);

    responseWriter.write("ok");
}
{% endhighlight %}

#### HttpEntity

- 스프링 MVC는 다음 파라미터를 지원한다.
    - HttpEntity
        - HTTP header, body 정보를 편리하게 조회한다.
        - 메시지 바디 정보를 직접 조회한다.
        - 요청 파라미터를 조회하는 기능과 관계 없다.
            - @RequestParam나 @ModelAttribute를 의미한다.
    - HttpEntity는 응답에도 사용 가능하다.
        - 메시지 바디 정보 직접 반환한다.
        - 헤더 정보 포함 가능하다.
        - view를 조회하지 않는다.
- HttpEntity 를 상속받은 다음 객체들도 같은 기능을 제공한다.
    - RequestEntity
        - HttpMethod, url 정보가 추가된다.
        - 요청에서 사용한다.
    - ResponseEntity
        - HTTP 상태 코드를 설정할 수 있다.
        - 응답에서 사용한다.
        - `return new ResponseEntity&lt;String>("Hello World", responseHeaders, HttpStatus.CREATED)`
- 참고
    - 스프링 MVC 내부에서 HTTP 메시지 바디를 읽어서 문자나 객체로 변환해서 전달해준다.
        - 이 때, HTTP 메시지 컨버터(HttpMessageConverter)라는 기능을 사용한다.

{% highlight java %}
/**
    * HttpEntity: HTTP header, body 정보를 편리하게 조회
    * - 메시지 바디 정보를 직접 조회(@RequestParam X, @ModelAttribute X)
    * - HttpMessageConverter 사용 -> StringHttpMessageConverter 적용
    *
    * 응답에서도 HttpEntity 사용 가능
    * - 메시지 바디 정보 직접 반환(view 조회X)
    * - HttpMessageConverter 사용 -> StringHttpMessageConverter 적용
*/
@PostMapping("/request-body-string-v3")
public HttpEntity<String> requestBodyStringV3(HttpEntity<String> httpEntity) {
    String messageBody = httpEntity.getBody();
    log.info("messageBody={}", messageBody);
    return new HttpEntity<>("ok");
}
{% endhighlight %}

#### @RequestBody 

- @RequestBody
    - @RequestBody를 사용하면 HTTP 메시지 바디 정보를 편리하게 조회할 수 있다.
    - 참고로 헤더 정보가 필요하다면 HttpEntity를 사용하거나 @RequestHeader를 사용하면 된다.
    - 이렇게 메시지 바디를 직접 조회하는 기능은 요청 파라미터를 조회하는 @RequestParam나 @ModelAttribute는 전혀 관계가 없다.
- @ResponseBody
    - @ResponseBody를 사용하면 응답 결과를 HTTP 메시지 바디에 직접 담아서 전달할 수 있다.
    - 물론 이 경우에도 view를 사용하지 않는다.
- 요청 파라미터 vs HTTP 메시지 바디
    - 요청 파라미터를 조회하는 기능
        - @RequestParam
        - @ModelAttribute
    - HTTP 메시지 바디를 직접 조회하는 기능
        - @RequestBody

{% highlight java %}
/**
    * @RequestBody
    * - 메시지 바디 정보를 직접 조회(@RequestParam X, @ModelAttribute X)
    * - HttpMessageConverter 사용 -> StringHttpMessageConverter 적용
    *
    * @ResponseBody
    * - 메시지 바디 정보 직접 반환(view 조회X)
    * - HttpMessageConverter 사용 -> StringHttpMessageConverter 적용
*/
@ResponseBody
@PostMapping("/request-body-string-v4")
public String requestBodyStringV4(@RequestBody String messageBody) {
    log.info("messageBody={}", messageBody);
    return "ok";
}
{% endhighlight %}

### HTTP 요청 메시지 - JSON

- 이번에는 HTTP API에서 주로 사용하는 JSON 데이터 형식을 조회해보자.
- HttpServletRequest를 사용해서 직접 HTTP 메시지 바디에서 데이터를 읽어와서, 문자로 변환한다.
- 문자로 된 JSON 데이터를 Jackson 라이브러리인 ObjectMapper를 사용해서 자바 객체로 변환한다.

{% highlight java %}
package hello.springmvc.basic.request;

import com.fasterxml.jackson.databind.ObjectMapper;
import hello.springmvc.basic.HelloData;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.util.StreamUtils;
import org.springframework.web.bind.annotation.PostMapping;
import jakarta.servlet.ServletInputStream;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

/**
 * {"username":"hello", "age":20}
 * content-type: application/json
 */
@Slf4j
@Controller
public class RequestBodyJsonController {
    private ObjectMapper objectMapper = new ObjectMapper();
    @PostMapping("/request-body-json-v1")
    public void requestBodyJsonV1(HttpServletRequest request, HttpServletResponse response) throws IOException {
        ServletInputStream inputStream = request.getInputStream();
        String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
        log.info("messageBody={}", messageBody);

        HelloData data = objectMapper.readValue(messageBody, HelloData.class);
        log.info("username={}, age={}", data.getUsername(), data.getAge());

        response.getWriter().write("ok");
    }
}
{% endhighlight %}

#### @RequestBody 문자 변환

- @RequestBody를 사용해서 HTTP 메시지에서 데이터를 꺼내고 messageBody에 저장한다.
- 문자로 된 JSON 데이터인 messageBody를 ObjectMapper 를 통해서 자바 객체로 변환한다.

{% highlight java %}
/**
    * @RequestBody
    * HttpMessageConverter 사용 -> StringHttpMessageConverter 적용
    *
    * @ResponseBody
    * - 모든 메서드에 @ResponseBody 적용
    * - 메시지 바디 정보 직접 반환(view 조회X)
    * - HttpMessageConverter 사용 -> StringHttpMessageConverter 적용
*/
@ResponseBody
@PostMapping("/request-body-json-v2")
public String requestBodyJsonV2(@RequestBody String messageBody) throws IOException {
    HelloData data = objectMapper.readValue(messageBody, HelloData.class);
    log.info("username={}, age={}", data.getUsername(), data.getAge());
    return "ok";
}
{% endhighlight %}

#### @RequestBody 객체 변환

- HttpEntity나 @RequestBody를 사용하면 HTTP 메시지 컨버터가 HTTP 메시지 바디의 내용을 우리가 원하는 문자나 객체 등으로 변환해준다.
- HTTP 메시지 컨버터는 문자 뿐만 아니라 JSON도 객체로 변환해준다.
- (중요) @RequestBody는 생략할 수 없다.
    - @RequestBody를 생략하면 @ModelAttribute가 적용된다.
    - 생략하면 HTTP 메시지 바디가 아니라 요청 파라미터를 처리하게 된다.
- HTTP 요청시에 content-type이 `application/json`인지 확인해야 한다.
    - 그래야 JSON을 처리할 수 있는 HTTP 메시지 컨버터가 실행된다.

{% highlight java %}
/**
    * @RequestBody 생략 불가능(@ModelAttribute 가 적용되어 버림)
    * HttpMessageConverter 사용 -> MappingJackson2HttpMessageConverter (content-type: application/json)
*/
@ResponseBody
@PostMapping("/request-body-json-v3")
public String requestBodyJsonV3(@RequestBody HelloData data) {
    log.info("username={}, age={}", data.getUsername(), data.getAge());
    return "ok";
}
{% endhighlight %}

#### HttpEntity 사용

- @RequestBody 대신에 HttpEntity를 사용해도 된다.

{% highlight java %}
@ResponseBody
@PostMapping("/request-body-json-v4")
public String requestBodyJsonV4(HttpEntity<HelloData> httpEntity) {
    HelloData data = httpEntity.getBody();
    log.info("username={}, age={}", data.getUsername(), data.getAge());
    return "ok";
}
{% endhighlight %}

#### HttpEntity로 응답

- @ResponseBody 대신에 HttpEntity로 응답 데이터를 반환해도 된다.

{% highlight java %}
/**
    * @RequestBody 생략 불가능(@ModelAttribute 가 적용되어 버림)
    * HttpMessageConverter 사용 -> MappingJackson2HttpMessageConverter (content-type : application/json)
    *
    * @ResponseBody 적용
    * - 메시지 바디 정보 직접 반환(view 조회X)
    * - HttpMessageConverter 사용 -> MappingJackson2HttpMessageConverter 적용 (Accept : application/json)
*/
//@ResponseBody
@PostMapping("/request-body-json-v5")
public HttpEntity<HelloData> requestBodyJsonV5(@RequestBody HelloData data) {
    log.info("username={}, age={}", data.getUsername(), data.getAge());
    return new HttpEntity<>(data);
}
{% endhighlight %}

### HTTP 응답 - 정적 리소스, 뷰 템플릿

- 스프링(서버)에서 응답 데이터를 만드는 방법은 크게 3가지이다.
    - 정적 리소스
        - 웹 브라우저에 정적인 HTML, css, js를 제공할 때는, 정적 리소스를 사용한다.
    - 뷰 템플릿 사용
        - 웹 브라우저에 동적인 HTML을 제공할 때는 뷰 템플릿을 사용한다.
    - HTTP 메시지 사용
        - HTTP API를 제공하는 경우에는 HTML이 아니라 데이터를 전달해야 하므로, HTTP 메시지 바디에 JSON 같은 형식으로 데이터를 실어 보낸다.

#### 정적 리소스

- 정적 리소스는 해당 파일을 변경 없이 그대로 서비스하는 것이다.
- 스프링 부트는 클래스패스의 다음 디렉토리에 있는 정적 리소스를 제공한다.
    - `/static`
    - `/public`
    - `/resources`
    - `/META-INF/resources`
- `src/main/resources`는 리소스를 보관하는 곳이다.
    - 또한 클래스패스의 시작 경로이다.
- 예시
    - 파일 경로
        - `src/main/resources/static/basic/hello-form.html`
    - 실행 경로
        - `http://localhost:8080/basic/hello-form.html`

#### 뷰 템플릿

- 뷰 템플릿을 거쳐서 HTML이 생성되고, 뷰가 응답을 만들어서 전달한다.
- 일반적으로 HTML을 동적으로 생성하는 용도로 사용하지만, 다른 것들도 가능하다.
    - 뷰 템플릿이 만들 수 있는 것이라면 뭐든지 가능하다.
- 스프링 부트는 기본 뷰 템플릿 경로를 제공한다.
    - `src/main/resources/templates`

##### 뷰 템플릿 생성

- `src/main/resources/templates/response/hello.html`
{% highlight html %}
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>
    <body>
        <p th:text="${data}">empty</p>
    </body>
</html>
{% endhighlight %}

##### 뷰 템플릿을 호출하는 컨트롤러 생성

{% highlight java %}
package hello.springmvc.basic.response;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class ResponseViewController {
    @RequestMapping("/response-view-v1")
    public ModelAndView responseViewV1() {
        ModelAndView mav = new ModelAndView("response/hello").addObject("data", "hello!");
        return mav;
    }
    
    @RequestMapping("/response-view-v2")
    public String responseViewV2(Model model) {
        model.addAttribute("data", "hello!!");
        return "response/hello";
    }
    
    @RequestMapping("/response/hello")
    public void responseViewV3(Model model) {
        model.addAttribute("data", "hello!!");
    }
}
{% endhighlight %}

#### 뷰 템플릿 (String을 반환하는 경우)

- @ResponseBody가 없으면 response/hello 로 뷰 리졸버가 실행되어서 뷰를 찾고, 렌더링 한다.
- @ResponseBody가 있으면 뷰 리졸버를 실행하지 않고, HTTP 메시지 바디에 직접 response/hello라는 문자가 입력된다.
    - 여기서는 뷰의 논리 이름인 response/hello를 반환하면 다음 경로의 뷰 템플릿이 렌더링 되는 것을 확인할 수 있다.

#### 뷰 템플릿 (void를 반환하는 경우)

- 요청 URL을 참고해서 논리 뷰 이름으로 사용한다.
- 동작하기 위한 전제 조건이 필요하다.
    - @Controller 사용하고
    - HttpServletResponse나 OutputStream(Writer)같은 HTTP 메시지 바디를 처리하는 파라미터가 없어야 한다.
- 명시성이 너무 떨어지고 이렇게 딱 맞는 경우도 많이 없어서, 권장되지 않는 방법이다.

#### 뷰 템플릿 (HTTP 메시지)

- @ResponseBody나 HttpEntity를 사용한다.
    - 뷰 템플릿을 사용하지 않는다.
    - HTTP 메시지 바디에 직접 응답 데이터를 출력할 수 있다.

#### Thymeleaf 스프링 부트 설정

- Thymeleaf를 사용하기 위해서는 build.gradle에 아래 라이브러리를 추가해야 한다.
    - `implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'`
- 스프링 부트가 자동으로 ThymeleafViewResolver와 필요한 스프링 빈들을 등록한다.
    - 또한 기본적인 설정들도 미리 등록한다.
- 적용된 기본 값 (application.properties)
    - `spring.thymeleaf.prefix=classpath:/templates/`
    - `spring.thymeleaf.suffix=.html`

### HTTP 응답 - HTTP API, 메시지 바디에 직접 입력

- HTTP API를 제공하는 경우에는 HTML이 아니라 데이터를 전달해야 한다.
    - 따라서 HTTP 메시지 바디에 JSON 같은 형식으로 데이터를 실어 보낸다.
- 메소드별 설명
    - responseBodyV1
        - 서블릿을 직접 다룰 때처럼 HttpServletResponse 객체를 통해서 HTTP 메시지 바디에 직접 ok 응답 메시지를 전달한다.
    - responseBodyV2
        - ResponseEntity 엔티티는 HttpEntity를 상속 받는다.
        - HttpEntity는 HTTP 메시지의 헤더, 바디 정보를 가지고 있다.
        - ResponseEntity는 여기에 더해서 HTTP 응답 코드를 설정할 수 있다.
        - HttpStatus.CREATED로 변경하면 201 응답이 나가는 것을 확인할 수 있다.
    - responseBodyV3
        - @ResponseBody 를 사용하면 view를 사용하지 않고, HTTP 메시지 컨버터를 통해서 HTTP 메시지를 직접 입력할 수 있다.
        - ResponseEntity 도 동일한 방식으로 동작한다.
    - responseBodyJsonV1
        - ResponseEntity를 반환한다.
        - HTTP 메시지 컨버터를 통해서 JSON 형식으로 변환되어서 반환된다.
    - responseBodyJsonV2
        - ResponseEntity는 HTTP 응답 코드를 설정할 수 있다.
        - @ResponseBody를 사용하면 이런 것을 설정하기 까다롭다.
        - @ResponseStatus(HttpStatus.OK) 애노테이션을 사용하면 응답 코드도 설정할 수 있다.
        - 물론 애노테이션이기 때문에 응답 코드를 동적으로 변경할 수는 없다.
        - 프로그램 조건에 따라서 동적으로 변경하려면 ResponseEntity 를 사용하면 된다.
- @RestController
    - @Controller 대신에 @RestController 애노테이션을 사용하면, 해당 컨트롤러에 모두 @ResponseBody가 적용되는 효과가 있다.
        - 따라서 뷰 템플릿을 사용하는 것이 아니라, HTTP 메시지 바디에 직접 데이터를 입력한다.
    - 이름 그대로 Rest API(HTTP API)를 만들 때 사용하는 컨트롤러이다.
    - @RestController 에노테이션 안에 @ResponseBody 가 적용되어 있다.

{% highlight java %}
package hello.springmvc.basic.response;

import hello.springmvc.basic.HelloData;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

@Slf4j
@Controller
//@RestController
public class ResponseBodyController {
    @GetMapping("/response-body-string-v1")
    public void responseBodyV1(HttpServletResponse response) throws IOException {
        response.getWriter().write("ok");
    }
    
    /**
     * HttpEntity, ResponseEntity(Http Status 추가)
     * @return
     */
    @GetMapping("/response-body-string-v2")
    public ResponseEntity<String> responseBodyV2() {
        return new ResponseEntity<>("ok", HttpStatus.OK);
    }
    
    @ResponseBody
    @GetMapping("/response-body-string-v3")
    public String responseBodyV3() {
        return "ok";
    }
    
    @GetMapping("/response-body-json-v1")
    public ResponseEntity<HelloData> responseBodyJsonV1() {
        HelloData helloData = new HelloData();
        helloData.setUsername("userA");
        helloData.setAge(20);
        return new ResponseEntity<>(helloData, HttpStatus.OK);
    }
    
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    @GetMapping("/response-body-json-v2")
    public HelloData responseBodyJsonV2() {
        HelloData helloData = new HelloData();
        helloData.setUsername("userA");
        helloData.setAge(20);
        return helloData;
    }
}
{% endhighlight %}

### HTTP 메시지 컨버터

#### @ResponseBody 사용 원리

<img src="{{site.url}}{{site.baseurl}}{{site.post_img_root}}/mvc_010.png"/>

- @ResponseBody 를 사용
    - HTTP의 BODY에 문자 내용을 직접 반환
    - viewResolver 대신에 HttpMessageConverter가 동작
    - 기본 문자처리
        - StringHttpMessageConverter
    - 기본 객체처리
        - MappingJackson2HttpMessageConverter
    - byte 처리 등등 기타 여러 HttpMessageConverter가 기본으로 등록되어 있다.
- 응답의 경우 클라이언트의 HTTP Accept 해더와 서버의 컨트롤러 반환 타입 정보 둘을 조합해서 HttpMessageConverter 가 선택된다.

#### HTTP 메시지 컨버터

- 스프링 MVC는 다음의 경우에 HTTP 메시지 컨버터를 적용한다.
    - HTTP 요청
        - @RequestBody
        - HttpEntity(RequestEntity)
    - HTTP 응답
        - @ResponseBody
        - HttpEntity(ResponseEntity)
- HTTP 메시지 컨버터는 HTTP 요청, HTTP 응답 둘 다 사용된다.
    - `org.springframework.http.converter.HttpMessageConverter`
    - 메시지 컨버터가 해당 클래스, 미디어타입을 지원하는지 체크
    - 메시지 컨버터를 통해서 메시지를 읽고 쓰는 기능
- 스프링 부트는 다양한 메시지 컨버터를 제공하는데, 대상 클래스 타입과 미디어 타입 둘을 체크해서 사용여부를 결정한다.
    - 만약 만족하지 않으면 다음 메시지 컨버터로 우선순위가 넘어간다.
- HTTP 요청 데이터 읽기
    - HTTP 요청이 오고, 컨트롤러에서 @RequestBody, HttpEntity 파라미터를 사용한다.
    - 메시지 컨버터가 메시지를 읽을 수 있는지 확인하기 위해 canRead()를 호출한다.
        - 대상 클래스 타입을 지원하는가.
            - 예시 : @RequestBody 의 대상 클래스 (byte[] , String , HelloData)
        - HTTP 요청의 Content-Type 미디어 타입을 지원하는가.
            - 예시 : text/plain , application/json , */*
    - canRead() 조건을 만족하면 read() 를 호출해서 객체 생성하고, 반환한다.
- HTTP 응답 데이터 생성
    - 컨트롤러에서 @ResponseBody, HttpEntity로 값이 반환된다. 
    - 메시지 컨버터가 메시지를 쓸 수 있는지 확인하기 위해 canWrite()를 호출한다.
        - 대상 클래스 타입을 지원하는가.
            - 예시 : return의 대상 클래스 (byte[] , String , HelloData)
        - HTTP 요청의 Accept 미디어 타입을 지원하는가.
            - 더 정확히는 @RequestMapping의 produces를 의미한다.
            - 예시 : text/plain , application/json , */*
    - canWrite() 조건을 만족하면 write() 를 호출해서 HTTP 응답 메시지 바디에 데이터를 생성한다.

### 요청 매핑 핸들러 어뎁터 구조

#### HTTP 메시지 컨버터의 사용 위치

- 요청 매핑 핸들러 어뎁터는 애노테이션 기반의 컨트롤러(@RequestMapping)를 처리하는 핸들러 어댑터다.
- HTTP 메시지 컨버터는 요청 매핑 핸들러 어뎁터가 동작할 때 사용된다.

#### 요청 매핑 핸들러 어뎁터(RequestMappingHandlerAdapter) 동작 방식

1. DispatcherServlet이 요청 매핑 핸들러 어댑터를 호출한다.
2. 요청 매핑 핸들러 어댑터가 Argument Resolver를 한다.
3. ArgumentResolver는 컨트롤러(핸들러)가 필요로 하는 다양한 파리미터의 값(객체)를 생성한다.
    - HttpServletRequest, Model, @RequestParam 등이 해당된다.
    - 이 때 HTTP 메시지 컨버터가 동작해서 각 파라미터에 맞게 값을 설정해준다.
4. 파라미터의 값이 모두 준비되면 컨트롤러를 호출하면서 값을 넘겨준다.
5. 컨트롤러가 ReturnValueHandler를 통해서 컨트롤러의 반환 값을 변환한다.
    - ModelAndView, @ResponseBody, HttpEntity 등이 해당된다.
    - 이 때도 HTTP 메시지 컨버터가 동작해서 각 파라미터에 맞게 값을 설정해준다.
6. ReturnValueHandler가 변환한 응답 값을 요청 매핑 핸들러 어뎁터에 전달한다.

#### 확장

- 스프링은 ArgumentResolver, ReturnValueHandler, HttpMessageConverter를 모두 인터페이스로 제공한다.
    - 특히 30개가 넘는 ArgumentResolver와 10개가 넘는 ReturnValueHandler를 지원한다.
- 따라서 필요하면 언제든지 기능을 확장할 수 있다.
- 스프링이 필요한 대부분의 기능을 제공하기 때문에 실제 기능을 확장할 일이 많지는 않다.
- 하지만 확장할 일이 있다면 WebMvcConfigurer 를 상속 받아서 스프링 빈으로 등록하면 된다.


### 출처

- [스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술](https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-1)