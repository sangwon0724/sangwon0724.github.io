---
layout: post
title:  "Spring Cloud Gateway"
date:   2025-04-06 12:42:00 +0900
categories: Spring&nbsp;Cloud
published: false
tags: [MSA, 마이크로서비스]
---

### API Gateway란?

#### 정의

사용자가 설정한 라우팅 설정에 따라서 각각의 엔드포인트로 클라이언트를 대신해서 요청하고,  
응답을 받으면 다시 클라이언트한테 전달해주는 프록시(대리자) 역할을 한다.

시스템의 내부 구조는 숨기고 외부의 요청에 대해서 적절한 형태로 가공해서 응답할 수 있다는 장점을 가지고 있다.

```mermaid
flowchart LR
    A["클라이언트"] --- B["로드 밸런서<br/>or<br/>API 게이트웨이"]
    B --- C["서비스 디스커버리"]
    C --- D1["서비스 인스턴스 1"]
    C --- D2["서비스 인스턴스 2"]
    C --- D3["서비스 인스턴스 3"]
```

#### 특징

- 인증 및 원한 부여
- 서비스 검색 통합
- 응답 캐싱
- 정책, 회로 차단기 및 QoS 다시 시도
- 속도 제한
- 부하 분산
- 로깅, 추적, 상관 관계
- 헤더, 쿼리 문자열 및 청구 변환
- IP 허용 목록에 추가

### Spring Cloud에서의 MSA 간 통신

#### RestTemplete

- 전체 URL을 통해서 호출하는 방식

{% highlight java %}
RestTemplate restTemplate = new RestTemplate();
restTemplate.getForObject("http://localhost:8080/", User.class, 200);
{% endhighlight %}

#### Feign Client

- 마이크로서비스의 이름을 통해서 호출하는 방식

{% highlight java %}
@FeignClient("stores")
public interface StoreClient {
    @RequestMapping(method = RequestMethod.GET, value = "/stores")
    List<Store> getStores();
}
{% endhighlight %}

### Spring Cloud Gateway란?

#### 정의

MSA에서 API Gateway 역할을 수행하는 Spring Framework 기반의 API Gateway 서비스

#### 특징

- Spring 생태계와의 통합
  - Spring Boot, Spring Security, Spring WebFlux 등과 자연스럽게 연동됨.
- 리액티브 프로그래밍 지원 (WebFlux 기반)
  - 비동기, 논블로킹 방식으로 높은 처리량 제공.
- 라우팅 기능
  - 클라이언트 요청을 특정 서비스로 라우팅하는 설정이 간단함 (YAML/Java DSL 지원).
- 필터 체인
  - 전처리/후처리 필터를 통해 인증, 로깅, 변환 등의 작업 수행 가능.
- 동적 라우팅
  - 설정 변경 없이도 서비스 디스커버리(e.g., Eureka)와 연동해 동적으로 라우팅 가능.

#### 장점

- Spring 기반 개발자에게 익숙한 구성
- 비동기 처리로 성능 우수
- 클라우드 네이티브에 최적화
- 필터 커스터마이징이 용이
- 서드파티 서비스 연동 용이 (Netflix OSS 등)

#### 단점

- 리액티브 프로그래밍에 대한 학습 필요
- 복잡한 설정 시 디버깅이 어려울 수 있음
- 대규모 트래픽 처리 시 별도 튜닝 필요
- 전통적인 Spring MVC 기반 시스템과의 호환성 낮음

#### build.gradle

게이트웨이로 만들기 위해서는 build.gradle에 아래와 같이 추가해주면 된다.

{% highlight gradle %}
implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
{% endhighlight %}

스프링 이니셜라이저를 통해 추가했으면 gateway 뒤에 `-mvc`가 붙을 것이다.  
나중을 위해 `-mvc`를 제거해주자.

#### 환경설정

API Gateway의 환경설정은 아래와 같이 설정하면 된다.

{% highlight yaml %}
server:
  port: 8080

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  cloud:
    gateway:
    routes:
        - id: first-service
        uri: http://localhost:8081/
        predicates:
            - Path=/first-service/**
        - id: second-service
        uri: http://localhost:8082/
        predicates:
            - Path=/second-service/**
{% endhighlight %}

- `server.port`
    - 일반적으로 사용되는 8080 포트를 사용한 것을 볼 수 있다.
    - 모놀리식 아키텍처에서 애플리케이션에 접근하는 포트 번호를 MSA에서는 게이트웨이가 담당하는 것이다.
- `eureka.client.register-with-eureka`
    - 유레카의 레지스트리에 등록할 것인지에 대한 여부
- `eureka.client.fetch-registry`
    - 유레카 서버로부터 서비스 인스턴스들의 정보를 주기적으로 가져올 것인지에 대한 여부
- `eureka.client.vice-url.defaultZone`
    - 유레카 서버의 주소와 엔드 포인트를 명시하면 된다.
- `spring.cloud.gateway.mvc.routes`
    - 각 서비스 인스턴스들에 대한 정보를 명시한다.
    - 하위 속성
        - id
            - 해당 서비스에 대한 고유 id
        - url
            - 해당 서비스의 실제 주소
        - predicates
            - 해당 서비스를 호출하는 것인지 확인하는 조건
            - `Path=/first-service/**`처럼 명시하면  
            `/first-service/`로 시작하는 URL을 호출하게 됬을 때  
            해당 서비스 내에 있는 컨트롤러를 타게 된다.

#### 그럼 이제 서비스를 호출할 수 있을까?

아니다. 주소를 다시 잘 살펴봐야 한다.  
만약 사용자가 `http://localhost:8080/first-service/welcome`을 호출한다고 가정해보자.  
그러면 게이트웨이는 해당 주소가 first-service를 호출할 것이다.  
그렇다면 게이트웨이가 호출하는 것은  
`http://localhost:8081/welcome`일까? 아니면 `http://localhost:8081/first-service/welcome`일까?

정답은 후자인 `http://localhost:8081/first-service/welcome`이다.  
왜냐하면 predicates라는 것은 단순히 어느 서비스인지 판단하는 요소다.  
딱히 클래스에 `@RequestMapping` 추가하는 것 마냥 상위 경로가 되는 것처럼 동작하지 않는다.

그래서 실제로 first-service에서 `/first-service/welcome`으로 명시된 컨트롤러 메소드가 없다면  
해당 API가 존재하지 않는다고 판단하여 브라우저에서는 에러 페이지가 발생하게 된다.

### 게이트웨이와 필터

게이트웨이에도 필터를 적용할 수 있다.  
필터는 자바 코드로 직접 작성하는 방법과 환경설정 파일에 직접 정의하는 방법이 있다.

```mermaid
---
title: Spring Cloud Gateway 내부
---
flowchart LR
    A["Gateway Handler Mapping"] --> B["Predicate"]
    B --> C["Pre Filter"]
    C --- D["서비스 인스턴스"]
    D --- E["Post Filter"]
    E --- A
```
#### 사실 이미 필터는 정의되어 있다.

아까 application.yaml 파일에 정의했던 설정들 자체가  
기본적으로 적용되어 있는 필터를 환경변수를 통해 활성화하는 방법이다.

#### 자바 코드로 정의하기

RouteLocatorBuilder를 통해 각 서비스에 대한 정보를 정의하면 된다.  
아래는 그 예시다.

{% highlight java %}
@Configuration
public class FilterConfig {
    @Bean
    public RouteLocator gatewayRoutes(RouteLocatorBuilder builder) {
        return builder.routes()
            .route(r -> r.path("/first-service/**")
                .filters(f -> f.addRequestHeader("first-request", "first-request-header-by-java")
                        .addResponseHeader("first-response", "first-response-header-from-java")
                )
                .uri("http://localhost:8081"))
            .route(r -> r.path("/second-service/**")
                .filters(f -> f.addRequestHeader("second-request", "second-request-header-by-java")
                        .addResponseHeader("second-response", "second-response-header-from-java"))
                .uri("http://localhost:8082"))
            .build();
    }
}
{% endhighlight %}

특정 경로가 포함된 주소를 호출했을 때  
메소드 체이닝을 통해 요청 헤더나 응답 헤더 등 다양한 정보를 설정하게 할 수 있다.  
그런 다음에 uri 메소드를 통해서 어떤 서비스를 호출할 지  
해당 서비스의 주소를 명시한다.

참고로 자바 코드로 필터를 적용하려면 사용하는 라이브러리를 변경해야 한다.  
아래와 같이 `spring-cloud-starter-gateway-mvc`를  
`spring-cloud-starter-gateway`로 변경해주자.

{% highlight gradle %}
//implementation 'org.springframework.cloud:spring-cloud-starter-gateway-mvc'
implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
{% endhighlight %}

그리고 기존에 application.yaml 파일에서 정의한 내용들을  
주석처리해주자.

#### 환경설정 파일에서 직접 설정하기

우선 아까 추가한 FilterConfig에서 빈으로 등록하는 애노테이션들을 주석처리해주자.  
그리고 이전에 application.yaml에서 주석처리했던 것을 다시 해제해주자.  
그 다음에 filters 속성을 추가해주면 된다.  
filters 속성을 명시하면 아래와 같이 된다.

{% highlight yaml %}
spring:
  application:
    name: apigateway-service
  cloud:
    gateway:
      routes:
        - id: first-service
          uri: http://localhost:8081/
          predicates:
            - Path=/first-service/**
          filters:
            - AddRequestHeader=first-request,first-request-header-by-yaml
            - AddResponseHeader=first-response,first-response-header-by-yaml
        - id: second-service
          uri: http://localhost:8082/
          predicates:
            - Path=/second-service/**
          filters:
            - AddRequestHeader=second-request,second-request-header-by-yaml
            - AddResponseHeader=second-response,second-response-header-by-yaml
{% endhighlight %}

어떤한 속성을 추가하고 싶다면  
`Add` + `파스칼 케이스를 적용한 헤더 이름`처럼 명시하고  
쉼표를 구분자로 사용하여 key-value처럼 명시하면 된다.

### 커스텀 필터

게이트웨이에 적용할 필터를 직접 만들어서 적용할 수 있다.

#### 상속

게이트웨이에 적용할 커스텀 필터를 정의할 때는  
반드시 `AbstractGatewayFilterFactory<CustomFilter.Config>`를 상속받아야 한다.

#### 구현

AbstractGatewayFilterFactory를 상속받게 되면  
추상 클래스다 보니 GatewayFilter를 반환하는 apply 메소드를 구현해줘야 한다.

#### Pre Filter

GatewayFilter를 반환하는 apply 메소드를 구현하게 되면 
ServerWebExchange와 GatewayFilterChain라는 인터페이스를 통해  
람다 메소드를 정의하게 되는데,  
해당 메소드가 서비스에 요청하기 전에 동작하는  
Pre Filter다.

#### Post Filter

단순히 Pre Filter를 정의하는 것에서 끝나는 것이 아니다.  
GatewayFilterChain 인터페이스를 통해 필터를 체이닝할 수 있는데,  
해당 인터페이스의 filter 메소드를 통해 추가 메소드를 구현해주게 되면  
해당 메소드가 서비스에 요청한 후에 동작하는  
Post Filter다.

#### 에시

{% highlight java %}
@Component
@Slf4j
public class CustomFilter extends AbstractGatewayFilterFactory<CustomFilter.Config> {
    public CustomFilter() {
        super(Config.class);
    }

    @Override
    public GatewayFilter apply(Config config) {
        // Custom Pre Filter
        return (exchange, chain) -> {
            ServerHttpRequest request = exchange.getRequest(); //요청 정보 가져오기
            ServerHttpResponse response = exchange.getResponse(); //응답 정보 가져오기

            log.info("Custom PPreE filter: request id -> {}", request.getId());

            // Custom Post Filter
            return chain.filter(exchange).then(Mono.fromRunnable(() -> {
                log.info("Custom Post filter: response code -> {}", response.getStatusCode());
            }));
        };
    }

    public static class Config {
        // Put the configuration properties
    }
}
{% endhighlight %}

#### 적용하기

이전에 요청 헤더를 추가할 때  
filters 속성에 `- AddRequestHeader=first-request,first-request-header-by-yaml`처럼 추가해주었다.  
커스텀 필터를 적용할 때는 filter 속성에 `- CustomFilter`처럼 클래스명만 추가해주면 된다.

다만 만약에 별도의 설정 값을 주입해주려면  
`- name: CustomFilter`처럼 명시해줘야 한다.

### 글로벌 필터

글로벌 필터는 커스텀 필터와 동일하게 개발자가 직접 정의하는 필터다.  
다만 커스텀 필터의 경우에는 어떤 서비스에 적용할지 따로 명시해줘야 하지만,  
글로벌 필터의 경우에는 이름 그대로 모든 서비스에 적용되는 필터다.

#### 상속

게이트웨이에 적용할 커스텀 필터를 정의할 때는  
반드시 `AbstractGatewayFilterFactory<GlobalFilter.Config>`를 상속받아야 한다.

#### 구현

구현하는 방법 자체는 커스텀 필터와 동일하게 진행하면 된다.

#### 설정 값 정의하기

커스텀 필터와 글로벌 필터 모두 공통적으로 Config 클래스를 포함하고 있다.  
해당 클래스에 필드를 추가하여 각 필터에서 사용할 값을 유연하게 정의할 수 있다.  
필터 클래스 내부에 이너 클래스로 정의하면 된다.
{% highlight java %}
public static class Config { }
{% endhighlight %}

아래는 필드를 추가한 예시다.
{% highlight java %}
@Getter
@Setter
public static class Config {
    private String baseMessage;
    private boolean preLogger;
    private boolean postLogger;
}
{% endhighlight %}

그리고 값을 주입할 때는 application.yaml 파일에서  
아래와 같이 `default-filters` 속성에 명시하면 된다.
{% highlight java %}
spring:
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring CLoud Gateway Global Filter
            preLogger: true
            postLogger: true
{% endhighlight %}


### OrderedGatewayFilter

필터에는 순서를 적용할 수 있다.  
어느 필터를 사용하던 간에 GatewayFilter를 반환할텐데  
이 때 바로 람다를 반환하는 것이 아니라  
OrderedGatewayFilter로 한 번 감싸게 되면  
순번을 지정할 수 있는 필터가 된다.

아래는 그 예시다.
{% highlight java %}
/* 우선 순위를 갖는 Filter 적용 */
@Override
public GatewayFilter apply(Config config) {
    GatewayFilter filter = new OrderedGatewayFilter((exchange, chain) -> {
        ServerHttpRequest request = exchange.getRequest();
        ServerHttpResponse response = exchange.getResponse();

        log.info("Logging Filter baseMessage: {}", config.getBaseMessage());
        if (config.isPreLogger()) {
            log.info("Logging Pre Filter: request id -> {}", request.getId());
        }
        return chain.filter(exchange).then(Mono.fromRunnable(()->{
            if (config.isPostLogger()) {
                log.info("Logging Post Filter: response code -> {}", response.getStatusCode());
            }
        }));
    }, Ordered.HIGHEST_PRECEDENCE);

    return filter;
}
{% endhighlight %}

### 로드 밸런서

Spring Cloud Gateway는 내부에 로드 밸런서가 포함되어 있다.  
그래서 매핑 정보를 등록해두면 로드 밸런서를 통해  
알맞는 서비스를 호출할 수 있다.

그런데 현재는 환경설정 파일을 봤을 때  
uri가 `http://localhost:8081/`처럼 포트가 고정되어 있다.  
이렇게 되면 단 하나의 인스턴스에만 연결할 수 있다.

이를 바꿔서 로드 밸런서를 동작시켜보자.

#### uri 변경

기존의 uri 체계를 변경해야 한다.  
여기서 프로토콜과 호스트를 변경해줘야 한다.

프로토콜은 `로드 밸런서(Load Balancer)`를 줄여서 `lb`가 된다.  
호스트는 해당 서비스의 이름이 된다.  
여기서 이름이란 해당 애플리케이션의 환경설정 파일에 명시되어 있는  
`spring.application.name`을 의미한다.

이를 대입해보면 게이트웨이에 서비스 이름이 `first-service`인  
서비스를 등록하려면 `lb://first-service`라는 uri를 등록하면 된다.

참고로 `spring.cloud.gateway.routes`에서  
id와 uri에 있는 서비스 이름은 별개라서  
딱히 같지 않아도 되긴 하다.  
실제로 id는 `my-first-service`로,  
uri는 `lb://first-service`로 명시해도 동작한다.

#### 포트 번호 변경

서비스의 포트 번호도 변경해줘야 한다.  
만약 8081이라고 명시해두면 정말 하나밖에 사용하지 않는다.  
확장성을 위해 포트 번호를 0으로 설정해주자.  
그러면 서비스를 실행할 때 랜덤한 포트를 사용하게 된다.

또한 인스턴스의 고유한 아이디를 설정해줘야 한다.  
유레카 서버는 별도의 설정이 없으면 포트 번호를 기준으로  
서비스 목록을 보여주기 때문이다.

적용하면 각 서비스의 환경설정은 아래와 같이 된다.
{% highlight yaml %}
spring:
  application:
    name: 서비스명

server:
  port: 0

eureka:
  instance:
    instance-id: ${spring.cloud.client.hostname}:${spring.application.instance.id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
{% endhighlight %}

### 출처

- [Spring Cloud로 개발하는 마이크로서비스 애플리케이션(MSA)](https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4)