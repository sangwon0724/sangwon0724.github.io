---
layout: post
title:  "변수와 자료형과 연산자"
date:   2025-04-21 07:00:00 +0900
categories: Python
published: false
tags: [변수, 자료형, 연산자]
---

### 변수(Variable)

#### 변수란?

데이터를 저장하기 위한 공간에 이름을 부여한 것

#### 변수 선언하기

`변수명 = 값`처럼 선언하면 된다.
{% highlight py %}
name = "Hong Gil Dong
age = 30
height = 181.5
{% endhighlight %}

여러 개의 변수를 한 번에 선언할 수도 있다.
{% highlight py %}
a, b = 10, 20 # 단순 할당
a, b = (10, 20) # 튜플을 활용한 할당
a, b = [10, 20] # 리스트를 활용한 할당
a = b = 10 # 연속 할당
{% endhighlight %}

Java같은 경우에는 쉼표로 변수를 구분해서  
`int a = 10, b = 20`처럼 변수와 값을 함께 선언하고  
쉼표로 구분한다.  
하지만 Python의 경우에는 변수와 값을 따로따로 모아서 선언한다.  
Java에 익숙하다면 이 부분에 주의하자.

#### 동적 타이핑

파이썬은 동적 타이핑 언어다.  
변수에 할당된 값에 따라 변수의 타입이 결정되며,  
변수의 타입이 프로그램 실행 도중에 변경될 수 있다.
{% highlight py %}
x = 7 # 정수형 값 저장
print(x) # 출력 : 7
x = "seven" # 문자형 값 저장
print(x) # 출력 : seven
{% endhighlight %}

#### 변수 네이밍 규칙

변수의 이름은 짓는 방식 자체는 자유긴 하지만  
지켜야 하는 몇 가지 규칙이 존재한다.
- `_` 또는 문자로 시작해야 한다.
    - 여기서 문자는 보통은 영문자를 의미한다.
    - 한글로 변수명을 지어도 동작하는 데 지장은 없다.
- 숫자로 시작하면 안 된다.
- 특수문자는 사용할 수 없다.
    - `+`나 `-`같은 문자들이 해당한다.
- 변수의 이름에 공백이 존재하면 안 된다.
    - 공백을 의미하고 싶을 때는 공백 대신에 `_`를 사용하자.
- 예약어는 사용할 수 없다.
    - `if`나 `for`같은 예약어들이 해당된다.

### 숫자 자료형 (Number)

#### 정의

- 흔히 사용하는 숫자들로 이루어진 자료형이다.
- 정수, 실수, 8진수, 16진수를 사용한다.

#### 정수와 실수

정수와 실수는 단순히 사용하면 된다.
{% highlight py %}
a = 10
print(10) # 출력 : 10

b = -10
print(b) # 출력 : -10

c = 3.14
print(c) # 출력 : 3.14
{% endhighlight %}

#### 지수

컴퓨터식 지수 표현 방식을 사용할 수도 있다.  
e나 E를 사용하면 된다.

`3.14e10`의 경우 3.14 * 10<sup>10</sup>을 의미한다.

{% highlight py %}
d = 3.14e10
print(d) # 출력 : 31400000000.0

e = 3.14e-10
print(e) # 출력 :  3.14e-10 
{% endhighlight %}

#### 8진수

8진수를 사용할 때는 숫자 앞에 `0o`나 `0O`를 붙이면 된다.
{% highlight py %}
a = 0o137
print(a) # 출력 : 95

b = 0O137
print(b) # 출력 : 95
{% endhighlight %}

#### 16진수

16진수를 사용할 때는 숫자 앞에 `0x`나 `0X`를 붙이면 된다.
{% highlight py %}
a = 0xABC
print(a) # 출력 : 2748

b = 0XABC
print(b) # 출력 : 2748
{% endhighlight %}

### 문자열 자료형 (String)

#### 정의

문자열은 연속된 문자들의 나열이다.

#### 문자열 만들기

파이썬에서 문자열을 만드는 방법은 4가지가 있다.
{% highlight py %}
# 큰 따옴표로 감싸기
a = "문자열1"
print(a)

# 작은 따옴표로 감싸기
b = '문자열2'
print(b)

# 큰 따옴표 3개짜리로 감싸기
c = """문자열3"""
print(c)

# 작은 따옴표 3개짜리로 감싸기
d = '''문자열4'''
print(d)
{% endhighlight %}

#### 문자열 안의 따옴표

문자열은 같은 따옴표 문자로 열고 닫아야지 문자열로 인식된다.  
중간에 다른 따옴표를 사용하려면 별도의 처리 방식을 알아야 한다.
{% highlight py %}
# 큰 따옴표 안에 작은 따옴표
a = "I will play 'Cyphers'"
print(a)

# 작은 따옴표 안에 큰 따옴표
b = 'I will play "Cyphers"'
print(b)

# 이스케이프
c = "I will play \"Cyphers\""
print(c)
{% endhighlight %}

#### 여러 줄 사용하기

하나의 문자열을 처리할 때 줄바꿈을 사용하려면 별도의 처리 방식을 알아야 한다.
{% highlight py %}
# 이스케이프
a = "Line1\nLine2\nLine3"
print(a)

# 큰 따옴표 3개짜리로 감싸기
b = """
Line1
Line2
Line3
"""
print(b)

# 작은 따옴표 3개짜리로 감싸기
c = '''
Line1
Line2
Line3
'''
print(c)
{% endhighlight %}

줄바꿈 문자인 `\n`을 사용하는 것은 읽기 불편하고 줄이 길어지는 단점이 있다.  
출력하려는 문자열이 정말 짧은 편이 아닌 이상은 따옴표 3개짜리를 쓰자.

#### 이스케이프 코드 (Escape Code)

이스케이프 코드는 프로그래밍할 때 사용하기 위해 미리 정의해둔 문자 조합이다.  
주로 출력물을 보기 좋게 정렬하는 용도로 사용한다.

- 종류
    - `\n` : 줄바꿈 
    - `\t` : 탭 추가
    - `\\` : 문자열 안에서 `\` 사용하기
    - `\"` : 문자열 안에서 `"` 사용하기
    - `\'` : 문자열 안에서 `'` 사용하기

이외에도 몇 가지 더 있긴 한데 자주 사용하는 것만 정리했다.

#### 문자열 연산

{% highlight py %}
# 문자열 더하기 (문자열 합치기)
front = "Front"
back = "Back"
print(front + back) # 출력 : FrontBack

# 문자열 곱하기 (문자열 반복하기)
text = "text"
print(text * 3) # 출력 : texttexttext

# 문자열 길이 (공백 문자 포함)
abc = "A B C"
print(len(abc)) # 출력 : 5
{% endhighlight %}

#### 인덱싱 (Indexing)

인덱싱은 지정한 조건에 해당하는 데이터를 탐색하는 것이다.  
인덱싱은 `인덱스(Index)`라는 값을 통해서 진행한다.  
여기서 인덱스는 0부터 시작하는 순번을 의미한다.  
문자열에서 인덱싱을 통해 값을 가져오면 한 글자만 가져온다.

0부터 시작한다고 해서 양수만 사용할 수 있는 것은 아니다.  
음수도 사용할 수 있는데 음수를 사용하면 뒤에서부터 문자열을 읽는다.  
다만 뒤에서 읽은 때는 -0부터 시작하는게 아니라 -1부터 시작한다.  
어찌보면 당연한건데 +1과 -1은 다른 값이지만 +0과 -0은 같은 값이라서 그렇다.

{% highlight py %}
text = "A B C"
print(text[0]) # 출력 : A
print(text[2]) # 출력 : B
print(text[-1]) # 출력 : C
{% endhighlight %}

#### 슬라이싱 (Slicing)

"A B C"라는 문자열이 있다고 가정해보자.  
여기서 "A B"만 가져오려면 어떻게 해야할까?

단순하게 인덱싱으로만 하려면 아래와 같이 될 것이다.
{% highlight py %}
text = "A B C"
new_text = text[0] + text[1] + text[2]
print(new_text)
{% endhighlight %}

단순히 3글자도 이정도인데  
100글자나 200글자를 가져오려면 코드가 끝도 없이 길어질 것이다.  
이런 상황을 위해서 슬라이싱이라는 문법이 있다.  
`[문자열 or 변수명][시작_인덱스:종료_인덱스]`처럼 사용하면 된다.
{% highlight py %}
text = "abc"
print(text[0:1]) # 출력 : a
print(text[0:-1]) # 출력 : ab
print(text[1:1]) # 출력 : 공백
{% endhighlight %}

해당 문법을 사용하면 시작 인덱스부터 종료 인덱스까지의 문자를 가져올 수 있다.  
정확하게는 시작 인덱스부터 종료 인덱스 앞자리까지의 문자다.  
각 라인을 해석해보자.

첫번째 출력을 보면 0에서 1까지로 지정했는데  
1은 제외니 0에서 0까지라서 "a"가 출력된다.

두번째 출력을 보면 0에서 -1까지 지정했다.  
-1은 뒤에서부터 시작했을 때의 첫번째 자리를 지정한다.  
"abc"는 3글자이기 때문에 인덱스가 0부터 2까지 존재한다.  
즉, -1은 이 상황에서는 2번 인덱스를 가리키는 것이다.  
이를 치환해보면 실제로는 `text[0:2]`를 호출한 것과 같다.  
그러면 2번 인덱스는 제외되니 0번부터 1번까지 가져와서  
"ab"를 출력하는 것이다.

세번째 출력을 보면 1에서 1까지 지정했다.  
그런데 뒤쪽에 명시된 인덱스는 빠지게 된다.  
그러면 실제로는 1에서 0까지 가져와야 하는데  
이는 적합한 범위 지정 방식이 아니다.  
그래서 파이썬에서는 이런 상황에 공백 문자를 반환한다.

### 불리언 자료형 (Boolean)

불리언은 참과 거짓을 나타내는 자료형이다.  
값은 `True`와 `False` 딱 2가지만 있다.

주의할 점은 다른 언어같은 경우에는 보통 소문자로만 되어 있는 `true`와 `false`를 쓰지만,  
파이썬에서는 `True`와 `False`를 사용한다.  
첫 글자가 대문자인 것을 잘 숙지하고 사용하자.

### None

해당 변수의 값이 "비어있다."를 표현하기 위한 자료형이다.  
다른 언어에서의 `null`에 대응된다.

{% highlight py %}
a = None
print(a) # 출력 : None
{% endhighlight %}

### 리스트 (List)

#### 정의
#### 리스트 선언
#### 리스트 특징
#### 리스트 인덱싱
#### 리스트 슬라이싱
#### 리스트 함수
#### 리스트 삭제

### 튜플 (Tuple)

#### 정의
#### 튜플 선언
#### 튜플 특징
#### 튜플 슬라이싱
#### 튜플 함수
#### 팩킹 & 언팩킹

### 집합 (Set)

#### 정의
#### 집합 선언
#### 집합 특징
#### 집합 추가
#### 집합 관련 함수

### 딕셔너리

#### 정의
#### 딕셔너리 선언
#### 딕셔너리 특징
#### 딕셔너리 수정
#### 딕셔너리 함수
#### 딕셔너리 중요성

### 연산자

#### 산술 연산자
#### 관계 연산자
#### 논리 연산자
#### 삼항 연산자
#### 비트 연산자
#### 복합 대입 연산자
#### 멤버 연산자
#### 아이디 연산자
#### 연산 우선 순위

<!--
형변환
https://wikidocs.net/230522
https://wikidocs.net/13
https://wikidocs.net/20670
-->